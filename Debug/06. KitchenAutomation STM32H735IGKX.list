
06. KitchenAutomation STM32H735IGKX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005fa8  08005fa8  00006fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08005fac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002cc  24000060  0800600c  00007060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400032c  0800600c  0000732c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eccc  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001cdf  00000000  00000000  00015d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a50  00000000  00000000  00017a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007ea  00000000  00000000  00018490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032132  00000000  00000000  00018c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e5e8  00000000  00000000  0004adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143c50  00000000  00000000  00059394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019cfe4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f1c  00000000  00000000  0019d028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  0019ff44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005ee0 	.word	0x08005ee0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	08005ee0 	.word	0x08005ee0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:

char msg[200]; // Buffer to store the string
int counter = 0;

int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  MPU_Config();
 80006b4:	f000 f9da 	bl	8000a6c <MPU_Config>
  HAL_Init();
 80006b8:	f000 fb96 	bl	8000de8 <HAL_Init>
  SystemClock_Config();
 80006bc:	f000 f8ba 	bl	8000834 <SystemClock_Config>
  MX_GPIO_Init();
 80006c0:	f000 f962 	bl	8000988 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f914 	bl	80008f0 <MX_USART3_UART_Init>

  while (1)
  {	   if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET)  // If the OUTA is RESET
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	4853      	ldr	r0, [pc, #332]	@ (8000818 <main+0x168>)
 80006cc:	f000 ff46 	bl	800155c <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d17c      	bne.n	80007d0 <main+0x120>
	  	  {	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_RESET)  // If OUTB is also reset... CCK
 80006d6:	2140      	movs	r1, #64	@ 0x40
 80006d8:	484f      	ldr	r0, [pc, #316]	@ (8000818 <main+0x168>)
 80006da:	f000 ff3f 	bl	800155c <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d133      	bne.n	800074c <main+0x9c>
			   {
				while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_RESET){};  // wait for the OUTB to go high
 80006e4:	bf00      	nop
 80006e6:	2140      	movs	r1, #64	@ 0x40
 80006e8:	484b      	ldr	r0, [pc, #300]	@ (8000818 <main+0x168>)
 80006ea:	f000 ff37 	bl	800155c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f8      	beq.n	80006e6 <main+0x36>
				if (counter <= 1) {counter = 51;}
 80006f4:	4b49      	ldr	r3, [pc, #292]	@ (800081c <main+0x16c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	dc02      	bgt.n	8000702 <main+0x52>
 80006fc:	4b47      	ldr	r3, [pc, #284]	@ (800081c <main+0x16c>)
 80006fe:	2233      	movs	r2, #51	@ 0x33
 8000700:	601a      	str	r2, [r3, #0]
				counter--;
 8000702:	4b46      	ldr	r3, [pc, #280]	@ (800081c <main+0x16c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	4a44      	ldr	r2, [pc, #272]	@ (800081c <main+0x16c>)
 800070a:	6013      	str	r3, [r2, #0]
				while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET){};  // wait for the OUTA to go high
 800070c:	bf00      	nop
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	4841      	ldr	r0, [pc, #260]	@ (8000818 <main+0x168>)
 8000712:	f000 ff23 	bl	800155c <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f8      	beq.n	800070e <main+0x5e>
				HAL_Delay (10);  // wait for some more time
 800071c:	200a      	movs	r0, #10
 800071e:	f000 fbf5 	bl	8000f0c <HAL_Delay>
				sprintf(msg, "Anti clockwise %d\n", counter); // Convert counter to string
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <main+0x16c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	493d      	ldr	r1, [pc, #244]	@ (8000820 <main+0x170>)
 800072a:	483e      	ldr	r0, [pc, #248]	@ (8000824 <main+0x174>)
 800072c:	f004 ff38 	bl	80055a0 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 20);
 8000730:	483c      	ldr	r0, [pc, #240]	@ (8000824 <main+0x174>)
 8000732:	f7ff fded 	bl	8000310 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	2314      	movs	r3, #20
 800073c:	4939      	ldr	r1, [pc, #228]	@ (8000824 <main+0x174>)
 800073e:	483a      	ldr	r0, [pc, #232]	@ (8000828 <main+0x178>)
 8000740:	f003 fd10 	bl	8004164 <HAL_UART_Transmit>
				HAL_Delay (20);  // wait for some more time
 8000744:	2014      	movs	r0, #20
 8000746:	f000 fbe1 	bl	8000f0c <HAL_Delay>
 800074a:	e041      	b.n	80007d0 <main+0x120>
			   	}

		    else if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_SET)  // If OUTB is also set
 800074c:	2140      	movs	r1, #64	@ 0x40
 800074e:	4832      	ldr	r0, [pc, #200]	@ (8000818 <main+0x168>)
 8000750:	f000 ff04 	bl	800155c <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d13a      	bne.n	80007d0 <main+0x120>
			   {
				while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_SET){};  // wait for the OUTB to go LOW.. CK
 800075a:	bf00      	nop
 800075c:	2140      	movs	r1, #64	@ 0x40
 800075e:	482e      	ldr	r0, [pc, #184]	@ (8000818 <main+0x168>)
 8000760:	f000 fefc 	bl	800155c <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d0f8      	beq.n	800075c <main+0xac>
				if (counter >= 50) {counter = 0;}
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <main+0x16c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b31      	cmp	r3, #49	@ 0x31
 8000770:	dd02      	ble.n	8000778 <main+0xc8>
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <main+0x16c>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
				counter++;
 8000778:	4b28      	ldr	r3, [pc, #160]	@ (800081c <main+0x16c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a27      	ldr	r2, [pc, #156]	@ (800081c <main+0x16c>)
 8000780:	6013      	str	r3, [r2, #0]
				while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET){};  // wait for the OUTA to go high
 8000782:	bf00      	nop
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	4824      	ldr	r0, [pc, #144]	@ (8000818 <main+0x168>)
 8000788:	f000 fee8 	bl	800155c <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f8      	beq.n	8000784 <main+0xd4>
				while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_RESET){};  // wait for the OUTB to go high
 8000792:	bf00      	nop
 8000794:	2140      	movs	r1, #64	@ 0x40
 8000796:	4820      	ldr	r0, [pc, #128]	@ (8000818 <main+0x168>)
 8000798:	f000 fee0 	bl	800155c <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f8      	beq.n	8000794 <main+0xe4>
				HAL_Delay (10);  // wait for some more time
 80007a2:	200a      	movs	r0, #10
 80007a4:	f000 fbb2 	bl	8000f0c <HAL_Delay>
				sprintf(msg, "Clockwise %d\n", counter); // Convert counter to string
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <main+0x16c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	491f      	ldr	r1, [pc, #124]	@ (800082c <main+0x17c>)
 80007b0:	481c      	ldr	r0, [pc, #112]	@ (8000824 <main+0x174>)
 80007b2:	f004 fef5 	bl	80055a0 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 20);
 80007b6:	481b      	ldr	r0, [pc, #108]	@ (8000824 <main+0x174>)
 80007b8:	f7ff fdaa 	bl	8000310 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	4918      	ldr	r1, [pc, #96]	@ (8000824 <main+0x174>)
 80007c4:	4818      	ldr	r0, [pc, #96]	@ (8000828 <main+0x178>)
 80007c6:	f003 fccd 	bl	8004164 <HAL_UART_Transmit>
				HAL_Delay (20);  // wait for some more time
 80007ca:	2014      	movs	r0, #20
 80007cc:	f000 fb9e 	bl	8000f0c <HAL_Delay>
			  	}
		  }

  	  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET)
 80007d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <main+0x168>)
 80007d6:	f000 fec1 	bl	800155c <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f47f af73 	bne.w	80006c8 <main+0x18>
  	  {	sprintf(msg, "Switch Pressed \n");
 80007e2:	4913      	ldr	r1, [pc, #76]	@ (8000830 <main+0x180>)
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <main+0x174>)
 80007e6:	f004 fedb 	bl	80055a0 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 20);
 80007ea:	480e      	ldr	r0, [pc, #56]	@ (8000824 <main+0x174>)
 80007ec:	f7ff fd90 	bl	8000310 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	490b      	ldr	r1, [pc, #44]	@ (8000824 <main+0x174>)
 80007f8:	480b      	ldr	r0, [pc, #44]	@ (8000828 <main+0x178>)
 80007fa:	f003 fcb3 	bl	8004164 <HAL_UART_Transmit>
		while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET){}		//engaging the switch while its been pressing
 80007fe:	bf00      	nop
 8000800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <main+0x168>)
 8000806:	f000 fea9 	bl	800155c <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f7      	beq.n	8000800 <main+0x150>
		HAL_Delay (20);		}
 8000810:	2014      	movs	r0, #20
 8000812:	f000 fb7b 	bl	8000f0c <HAL_Delay>
  {	   if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET)  // If the OUTA is RESET
 8000816:	e757      	b.n	80006c8 <main+0x18>
 8000818:	58021400 	.word	0x58021400
 800081c:	240001d8 	.word	0x240001d8
 8000820:	08005ef8 	.word	0x08005ef8
 8000824:	24000110 	.word	0x24000110
 8000828:	2400007c 	.word	0x2400007c
 800082c:	08005f0c 	.word	0x08005f0c
 8000830:	08005f1c 	.word	0x08005f1c

08000834 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	@ 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	224c      	movs	r2, #76	@ 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fecc 	bl	80055e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fec6 	bl	80055e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000854:	2004      	movs	r0, #4
 8000856:	f000 feb3 	bl	80015c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <SystemClock_Config+0xb8>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SystemClock_Config+0xb8>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <SystemClock_Config+0xb8>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087a:	bf00      	nop
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <SystemClock_Config+0xb8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000888:	d1f8      	bne.n	800087c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088a:	2302      	movs	r3, #2
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800088e:	2301      	movs	r3, #1
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000892:	2340      	movs	r3, #64	@ 0x40
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fee8 	bl	8001674 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008aa:	f000 f90b 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	233f      	movs	r3, #63	@ 0x3f
 80008b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 faa8 	bl	8001e28 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008de:	f000 f8f1 	bl	8000ac4 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3770      	adds	r7, #112	@ 0x70
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58024800 	.word	0x58024800

080008f0 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <MX_USART3_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800093a:	f003 fbc3 	bl	80040c4 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f8be 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800094c:	f004 fd5d 	bl	800540a <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f8b5 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800095e:	f004 fd92 	bl	8005486 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f8ac 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_USART3_UART_Init+0x90>)
 800096e:	f004 fd13 	bl	8005398 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f8a4 	bl	8000ac4 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2400007c 	.word	0x2400007c
 8000984:	40004800 	.word	0x40004800

08000988 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a27      	ldr	r2, [pc, #156]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0xd8>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <MX_GPIO_Init+0xdc>)
 8000a1c:	f000 fdb6 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000a20:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <MX_GPIO_Init+0xe0>)
 8000a36:	f000 fbe9 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_GPIO_Init+0xdc>)
 8000a52:	f000 fbdb 	bl	800120c <HAL_GPIO_Init>
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58020800 	.word	0x58020800
 8000a68:	58021400 	.word	0x58021400

08000a6c <MPU_Config>:

void MPU_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a7e:	f000 fb4d 	bl	800111c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a8e:	231f      	movs	r3, #31
 8000a90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a92:	2387      	movs	r3, #135	@ 0x87
 8000a94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fb6b 	bl	800118c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab6:	2004      	movs	r0, #4
 8000ab8:	f000 fb48 	bl	800114c <HAL_MPU_Enable>

}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <Error_Handler>:

void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b8      	sub	sp, #224	@ 0xe0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	22b8      	movs	r2, #184	@ 0xb8
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fd5b 	bl	80055e0 <memset>
  if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d146      	bne.n	8000bc2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f04f 0202 	mov.w	r2, #2
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fcf8 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b56:	f7ff ffb5 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000bbe:	f000 fb25 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	37e0      	adds	r7, #224	@ 0xe0
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004800 	.word	0x40004800
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f94d 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f004 fcc2 	bl	80055f0 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24050000 	.word	0x24050000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	240001dc 	.word	0x240001dc
 8000ca0:	24000330 	.word	0x24000330

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <SystemInit+0xd0>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a31      	ldr	r2, [pc, #196]	@ (8000d74 <SystemInit+0xd0>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <SystemInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	d807      	bhi.n	8000cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <SystemInit+0xd4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8000d78 <SystemInit+0xd4>)
 8000cce:	f043 0307 	orr.w	r3, r3, #7
 8000cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <SystemInit+0xd8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <SystemInit+0xd8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <SystemInit+0xd8>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4924      	ldr	r1, [pc, #144]	@ (8000d7c <SystemInit+0xd8>)
 8000cec:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <SystemInit+0xdc>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <SystemInit+0xd4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <SystemInit+0xd4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <SystemInit+0xd4>)
 8000d08:	f043 0307 	orr.w	r3, r3, #7
 8000d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <SystemInit+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <SystemInit+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <SystemInit+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <SystemInit+0xd8>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <SystemInit+0xe0>)
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <SystemInit+0xd8>)
 8000d28:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <SystemInit+0xe4>)
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <SystemInit+0xd8>)
 8000d2e:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <SystemInit+0xe8>)
 8000d30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <SystemInit+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <SystemInit+0xd8>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <SystemInit+0xe8>)
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <SystemInit+0xd8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <SystemInit+0xd8>)
 8000d46:	4a11      	ldr	r2, [pc, #68]	@ (8000d8c <SystemInit+0xe8>)
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <SystemInit+0xd8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <SystemInit+0xd8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <SystemInit+0xd8>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <SystemInit+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <SystemInit+0xec>)
 8000d64:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	52002000 	.word	0x52002000
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d84:	02020200 	.word	0x02020200
 8000d88:	01ff0000 	.word	0x01ff0000
 8000d8c:	01010280 	.word	0x01010280
 8000d90:	52004000 	.word	0x52004000

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff84 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 fc1b 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc73 	bl	80006b0 <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000dd8:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 8000ddc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000de0:	2400032c 	.word	0x2400032c

08000de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC3_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f962 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df4:	f001 f9ce 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	@ (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f814 	bl	8000e60 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fe45 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	08005f30 	.word	0x08005f30
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f939 	bl	8001102 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f911 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2400000c 	.word	0x2400000c
 8000ec4:	24000000 	.word	0x24000000
 8000ec8:	24000008 	.word	0x24000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2400000c 	.word	0x2400000c
 8000ef0:	240001e0 	.word	0x240001e0

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	240001e0 	.word	0x240001e0

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2400000c 	.word	0x2400000c

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0000 	.word	0x05fa0000

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb2 	bl	8001074 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001120:	f3bf 8f5f 	dmb	sy
}
 8001124:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_MPU_Disable+0x28>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_MPU_Disable+0x28>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001130:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_MPU_Disable+0x2c>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	e000ed90 	.word	0xe000ed90

0800114c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_MPU_Enable+0x38>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_MPU_Enable+0x3c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <HAL_MPU_Enable+0x3c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800116a:	f3bf 8f4f 	dsb	sy
}
 800116e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001170:	f3bf 8f6f 	isb	sy
}
 8001174:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed90 	.word	0xe000ed90
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	785a      	ldrb	r2, [r3, #1]
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <HAL_MPU_ConfigRegion+0x7c>)
 800119a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <HAL_MPU_ConfigRegion+0x7c>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_MPU_ConfigRegion+0x7c>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011a8:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <HAL_MPU_ConfigRegion+0x7c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7b1b      	ldrb	r3, [r3, #12]
 80011b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7adb      	ldrb	r3, [r3, #11]
 80011ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7a9b      	ldrb	r3, [r3, #10]
 80011c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b5b      	ldrb	r3, [r3, #13]
 80011ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7b9b      	ldrb	r3, [r3, #14]
 80011d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7bdb      	ldrb	r3, [r3, #15]
 80011da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a5b      	ldrb	r3, [r3, #9]
 80011e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f8:	6113      	str	r3, [r2, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed90 	.word	0xe000ed90

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800121a:	4b86      	ldr	r3, [pc, #536]	@ (8001434 <HAL_GPIO_Init+0x228>)
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800121e:	e18c      	b.n	800153a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 817e 	beq.w	8001534 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x44>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f003 0201 	and.w	r2, r3, #1
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	69b9      	ldr	r1, [r7, #24]
 800133e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0203 	and.w	r2, r3, #3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80d8 	beq.w	8001534 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_GPIO_Init+0x22c>)
 8001386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800138a:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <HAL_GPIO_Init+0x22c>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_GPIO_Init+0x22c>)
 8001396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a26      	ldr	r2, [pc, #152]	@ (800143c <HAL_GPIO_Init+0x230>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <HAL_GPIO_Init+0x234>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04a      	beq.n	8001464 <HAL_GPIO_Init+0x258>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <HAL_GPIO_Init+0x238>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x222>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <HAL_GPIO_Init+0x23c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x21e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	@ (800144c <HAL_GPIO_Init+0x240>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_GPIO_Init+0x244>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <HAL_GPIO_Init+0x248>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_GPIO_Init+0x24c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a16      	ldr	r2, [pc, #88]	@ (800145c <HAL_GPIO_Init+0x250>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x20a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <HAL_GPIO_Init+0x254>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x206>
 800140e:	2309      	movs	r3, #9
 8001410:	e029      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 8001412:	230a      	movs	r3, #10
 8001414:	e027      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 8001416:	2307      	movs	r3, #7
 8001418:	e025      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 800141a:	2306      	movs	r3, #6
 800141c:	e023      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 800141e:	2305      	movs	r3, #5
 8001420:	e021      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 8001422:	2304      	movs	r3, #4
 8001424:	e01f      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 8001426:	2303      	movs	r3, #3
 8001428:	e01d      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 800142a:	2302      	movs	r3, #2
 800142c:	e01b      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 800142e:	2301      	movs	r3, #1
 8001430:	e019      	b.n	8001466 <HAL_GPIO_Init+0x25a>
 8001432:	bf00      	nop
 8001434:	58000080 	.word	0x58000080
 8001438:	58024400 	.word	0x58024400
 800143c:	58000400 	.word	0x58000400
 8001440:	58020000 	.word	0x58020000
 8001444:	58020400 	.word	0x58020400
 8001448:	58020800 	.word	0x58020800
 800144c:	58020c00 	.word	0x58020c00
 8001450:	58021000 	.word	0x58021000
 8001454:	58021400 	.word	0x58021400
 8001458:	58021800 	.word	0x58021800
 800145c:	58021c00 	.word	0x58021c00
 8001460:	58022400 	.word	0x58022400
 8001464:	2300      	movs	r3, #0
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001476:	4938      	ldr	r1, [pc, #224]	@ (8001558 <HAL_GPIO_Init+0x34c>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3301      	adds	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ae6b 	bne.w	8001220 <HAL_GPIO_Init+0x14>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3724      	adds	r7, #36	@ 0x24
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	58000400 	.word	0x58000400

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d00a      	beq.n	80015ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e03f      	b.n	8001666 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e03d      	b.n	8001666 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80015f2:	491f      	ldr	r1, [pc, #124]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015fa:	f7ff fc7b 	bl	8000ef4 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001600:	e009      	b.n	8001616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001602:	f7ff fc77 	bl	8000ef4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001610:	d901      	bls.n	8001616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e027      	b.n	8001666 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800161e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001622:	d1ee      	bne.n	8001602 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b1e      	cmp	r3, #30
 8001628:	d008      	beq.n	800163c <HAL_PWREx_ConfigSupply+0x7c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b2e      	cmp	r3, #46	@ 0x2e
 800162e:	d005      	beq.n	800163c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b1d      	cmp	r3, #29
 8001634:	d002      	beq.n	800163c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b2d      	cmp	r3, #45	@ 0x2d
 800163a:	d113      	bne.n	8001664 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800163c:	f7ff fc5a 	bl	8000ef4 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001642:	e009      	b.n	8001658 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001644:	f7ff fc56 	bl	8000ef4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001652:	d901      	bls.n	8001658 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e006      	b.n	8001666 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_PWREx_ConfigSupply+0xb0>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0311 	and.w	r3, r3, #17
 8001660:	2b11      	cmp	r3, #17
 8001662:	d1ef      	bne.n	8001644 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	58024800 	.word	0x58024800

08001674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	@ 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e3c8      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800169e:	4b86      	ldr	r3, [pc, #536]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a6:	2b10      	cmp	r3, #16
 80016a8:	d007      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
 80016aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ac:	2b18      	cmp	r3, #24
 80016ae:	d110      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b7f      	ldr	r3, [pc, #508]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3a2      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b76      	ldr	r3, [pc, #472]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a75      	ldr	r2, [pc, #468]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b71      	ldr	r3, [pc, #452]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a70      	ldr	r2, [pc, #448]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6d      	ldr	r2, [pc, #436]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b68      	ldr	r3, [pc, #416]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a67      	ldr	r2, [pc, #412]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a64      	ldr	r2, [pc, #400]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a60      	ldr	r2, [pc, #384]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b5e      	ldr	r3, [pc, #376]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5d      	ldr	r2, [pc, #372]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fbd0 	bl	8000ef4 <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fbcc 	bl	8000ef4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e356      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fbbc 	bl	8000ef4 <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fbb8 	bl	8000ef4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e342      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 808c 	beq.w	80018c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b0:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ba:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_RCC_OscConfig+0x162>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	2b18      	cmp	r3, #24
 80017ca:	d137      	bne.n	800183c <HAL_RCC_OscConfig+0x1c8>
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d132      	bne.n	800183c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d6:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x17a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e314      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ee:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0219 	bic.w	r2, r3, #25
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	492f      	ldr	r1, [pc, #188]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb78 	bl	8000ef4 <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fb74 	bl	8000ef4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e2fe      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	4920      	ldr	r1, [pc, #128]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183a:	e045      	b.n	80018c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d026      	beq.n	8001892 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0219 	bic.w	r2, r3, #25
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4919      	ldr	r1, [pc, #100]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fb4d 	bl	8000ef4 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fb49 	bl	8000ef4 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e2d3      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	490b      	ldr	r1, [pc, #44]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
 8001890:	e01a      	b.n	80018c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fb29 	bl	8000ef4 <HAL_GetTick>
 80018a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fb25 	bl	8000ef4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d903      	bls.n	80018bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e2af      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
 80018b8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018bc:	4b96      	ldr	r3, [pc, #600]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d06a      	beq.n	80019aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d4:	4b90      	ldr	r3, [pc, #576]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018de:	4b8e      	ldr	r3, [pc, #568]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d007      	beq.n	80018fa <HAL_RCC_OscConfig+0x286>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b18      	cmp	r3, #24
 80018ee:	d11b      	bne.n	8001928 <HAL_RCC_OscConfig+0x2b4>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018fa:	4b87      	ldr	r3, [pc, #540]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x29e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b80      	cmp	r3, #128	@ 0x80
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e282      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001912:	4b81      	ldr	r3, [pc, #516]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	497d      	ldr	r1, [pc, #500]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001922:	4313      	orrs	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001926:	e040      	b.n	80019aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001930:	4b79      	ldr	r3, [pc, #484]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a78      	ldr	r2, [pc, #480]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fada 	bl	8000ef4 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001944:	f7ff fad6 	bl	8000ef4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e260      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001956:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001962:	4b6d      	ldr	r3, [pc, #436]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	061b      	lsls	r3, r3, #24
 8001970:	4969      	ldr	r1, [pc, #420]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	60cb      	str	r3, [r1, #12]
 8001976:	e018      	b.n	80019aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001978:	4b67      	ldr	r3, [pc, #412]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a66      	ldr	r2, [pc, #408]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 800197e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fab6 	bl	8000ef4 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800198c:	f7ff fab2 	bl	8000ef4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e23c      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800199e:	4b5e      	ldr	r3, [pc, #376]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d036      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c2:	4a55      	ldr	r2, [pc, #340]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fa93 	bl	8000ef4 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa8f 	bl	8000ef4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e219      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x35e>
 80019f0:	e018      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f6:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa79 	bl	8000ef4 <HAL_GetTick>
 8001a02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fa75 	bl	8000ef4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1ff      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a18:	4b3f      	ldr	r3, [pc, #252]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d036      	beq.n	8001a9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d019      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a38:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a36      	ldr	r2, [pc, #216]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa56 	bl	8000ef4 <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4c:	f7ff fa52 	bl	8000ef4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1dc      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3d8>
 8001a6a:	e018      	b.n	8001a9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fa3c 	bl	8000ef4 <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7ff fa38 	bl	8000ef4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1c2      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a92:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8086 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff fa1c 	bl	8000ef4 <HAL_GetTick>
 8001abc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7ff fa18 	bl	8000ef4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	@ 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1a2      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x480>
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aea:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4ac>
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b00:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	4a02      	ldr	r2, [pc, #8]	@ (8001b18 <HAL_RCC_OscConfig+0x4a4>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b14:	e021      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
 8001b16:	bf00      	nop
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	58024800 	.word	0x58024800
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4ce>
 8001b28:	4b83      	ldr	r3, [pc, #524]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	4a82      	ldr	r2, [pc, #520]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b34:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b38:	4a7f      	ldr	r2, [pc, #508]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
 8001b42:	4b7d      	ldr	r3, [pc, #500]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	4a7c      	ldr	r2, [pc, #496]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	4a79      	ldr	r2, [pc, #484]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f9c7 	bl	8000ef4 <HAL_GetTick>
 8001b66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9c3 	bl	8000ef4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e14b      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b80:	4b6d      	ldr	r3, [pc, #436]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f9b1 	bl	8000ef4 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff f9ad 	bl	8000ef4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e135      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bac:	4b62      	ldr	r3, [pc, #392]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 812a 	beq.w	8001e16 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	f000 80ba 	beq.w	8001d44 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8095 	bne.w	8001d04 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff f985 	bl	8000ef4 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f981 	bl	8000ef4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e10b      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c10:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <HAL_RCC_OscConfig+0x6c8>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	4945      	ldr	r1, [pc, #276]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	3b01      	subs	r3, #1
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c40:	3b01      	subs	r3, #1
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c56:	4938      	ldr	r1, [pc, #224]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	4a35      	ldr	r2, [pc, #212]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c68:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c6c:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <HAL_RCC_OscConfig+0x6cc>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c74:	00d2      	lsls	r2, r2, #3
 8001c76:	4930      	ldr	r1, [pc, #192]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	f023 020c 	bic.w	r2, r3, #12
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	492b      	ldr	r1, [pc, #172]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	f023 0202 	bic.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4927      	ldr	r1, [pc, #156]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cac:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f90a 	bl	8000ef4 <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f906 	bl	8000ef4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e090      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x670>
 8001d02:	e088      	b.n	8001e16 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8f0 	bl	8000ef4 <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8ec 	bl	8000ef4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e076      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2a:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_RCC_OscConfig+0x6c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a4>
 8001d36:	e06e      	b.n	8001e16 <HAL_RCC_OscConfig+0x7a2>
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	fffffc0c 	.word	0xfffffc0c
 8001d40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d44:	4b36      	ldr	r3, [pc, #216]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d4a:	4b35      	ldr	r3, [pc, #212]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d031      	beq.n	8001dbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d12a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d122      	bne.n	8001dbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d11a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0a5b      	lsrs	r3, r3, #9
 8001d8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d111      	bne.n	8001dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	0e1b      	lsrs	r3, r3, #24
 8001dae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e02b      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dc0:	4b17      	ldr	r3, [pc, #92]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d01f      	beq.n	8001e16 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de2:	f7ff f887 	bl	8000ef4 <HAL_GetTick>
 8001de6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001de8:	bf00      	nop
 8001dea:	f7ff f883 	bl	8000ef4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d0f9      	beq.n	8001dea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_RCC_OscConfig+0x7b0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e02:	00d2      	lsls	r2, r2, #3
 8001e04:	4906      	ldr	r1, [pc, #24]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_RCC_OscConfig+0x7ac>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3730      	adds	r7, #48	@ 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	58024400 	.word	0x58024400
 8001e24:	ffff0007 	.word	0xffff0007

08001e28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e19c      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d910      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b87      	ldr	r3, [pc, #540]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 020f 	bic.w	r2, r3, #15
 8001e52:	4985      	ldr	r1, [pc, #532]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b83      	ldr	r3, [pc, #524]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e184      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d908      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e88:	4b78      	ldr	r3, [pc, #480]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4975      	ldr	r1, [pc, #468]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b70      	ldr	r3, [pc, #448]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	496a      	ldr	r1, [pc, #424]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	4b64      	ldr	r3, [pc, #400]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee4:	4b61      	ldr	r3, [pc, #388]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	495e      	ldr	r1, [pc, #376]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	4b59      	ldr	r3, [pc, #356]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d908      	bls.n	8001f24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f12:	4b56      	ldr	r3, [pc, #344]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4953      	ldr	r1, [pc, #332]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d908      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f023 020f 	bic.w	r2, r3, #15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4947      	ldr	r1, [pc, #284]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d055      	beq.n	800200a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4940      	ldr	r1, [pc, #256]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f78:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0f6      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d115      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0ea      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0de      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d6      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc8:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f023 0207 	bic.w	r2, r3, #7
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4925      	ldr	r1, [pc, #148]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fda:	f7fe ff8b 	bl	8000ef4 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe2:	f7fe ff87 	bl	8000ef4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0be      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	429a      	cmp	r2, r3
 8002008:	d1eb      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d010      	beq.n	8002038 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	429a      	cmp	r2, r3
 8002024:	d208      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f023 020f 	bic.w	r2, r3, #15
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	490e      	ldr	r1, [pc, #56]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8002034:	4313      	orrs	r3, r2
 8002036:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d214      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 020f 	bic.w	r2, r3, #15
 800204e:	4906      	ldr	r1, [pc, #24]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e086      	b.n	8002176 <HAL_RCC_ClockConfig+0x34e>
 8002068:	52002000 	.word	0x52002000
 800206c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002088:	429a      	cmp	r2, r3
 800208a:	d208      	bcs.n	800209e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800208c:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4939      	ldr	r1, [pc, #228]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 800209a:	4313      	orrs	r3, r2
 800209c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d208      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	492e      	ldr	r1, [pc, #184]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d208      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4922      	ldr	r1, [pc, #136]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002112:	429a      	cmp	r2, r3
 8002114:	d208      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4917      	ldr	r1, [pc, #92]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 8002124:	4313      	orrs	r3, r2
 8002126:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002128:	f000 f834 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	4912      	ldr	r1, [pc, #72]	@ (8002184 <HAL_RCC_ClockConfig+0x35c>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_RCC_ClockConfig+0x358>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <HAL_RCC_ClockConfig+0x35c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <HAL_RCC_ClockConfig+0x360>)
 800215e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_RCC_ClockConfig+0x364>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_RCC_ClockConfig+0x368>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fe78 	bl	8000e60 <HAL_InitTick>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	58024400 	.word	0x58024400
 8002184:	08005f30 	.word	0x08005f30
 8002188:	24000004 	.word	0x24000004
 800218c:	24000000 	.word	0x24000000
 8002190:	24000008 	.word	0x24000008

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	@ 0x24
 8002198:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219a:	4bb3      	ldr	r3, [pc, #716]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021a2:	2b18      	cmp	r3, #24
 80021a4:	f200 8155 	bhi.w	8002452 <HAL_RCC_GetSysClockFreq+0x2be>
 80021a8:	a201      	add	r2, pc, #4	@ (adr r2, 80021b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	08002215 	.word	0x08002215
 80021b4:	08002453 	.word	0x08002453
 80021b8:	08002453 	.word	0x08002453
 80021bc:	08002453 	.word	0x08002453
 80021c0:	08002453 	.word	0x08002453
 80021c4:	08002453 	.word	0x08002453
 80021c8:	08002453 	.word	0x08002453
 80021cc:	08002453 	.word	0x08002453
 80021d0:	0800223b 	.word	0x0800223b
 80021d4:	08002453 	.word	0x08002453
 80021d8:	08002453 	.word	0x08002453
 80021dc:	08002453 	.word	0x08002453
 80021e0:	08002453 	.word	0x08002453
 80021e4:	08002453 	.word	0x08002453
 80021e8:	08002453 	.word	0x08002453
 80021ec:	08002453 	.word	0x08002453
 80021f0:	08002241 	.word	0x08002241
 80021f4:	08002453 	.word	0x08002453
 80021f8:	08002453 	.word	0x08002453
 80021fc:	08002453 	.word	0x08002453
 8002200:	08002453 	.word	0x08002453
 8002204:	08002453 	.word	0x08002453
 8002208:	08002453 	.word	0x08002453
 800220c:	08002453 	.word	0x08002453
 8002210:	08002247 	.word	0x08002247
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002214:	4b94      	ldr	r3, [pc, #592]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002220:	4b91      	ldr	r3, [pc, #580]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	4a90      	ldr	r2, [pc, #576]	@ (800246c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002232:	e111      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002234:	4b8d      	ldr	r3, [pc, #564]	@ (800246c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002236:	61bb      	str	r3, [r7, #24]
      break;
 8002238:	e10e      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800223a:	4b8d      	ldr	r3, [pc, #564]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800223c:	61bb      	str	r3, [r7, #24]
      break;
 800223e:	e10b      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002240:	4b8c      	ldr	r3, [pc, #560]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002242:	61bb      	str	r3, [r7, #24]
      break;
 8002244:	e108      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002246:	4b88      	ldr	r3, [pc, #544]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002250:	4b85      	ldr	r3, [pc, #532]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800225c:	4b82      	ldr	r3, [pc, #520]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002266:	4b80      	ldr	r3, [pc, #512]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226a:	08db      	lsrs	r3, r3, #3
 800226c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80e1 	beq.w	800244c <HAL_RCC_GetSysClockFreq+0x2b8>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b02      	cmp	r3, #2
 800228e:	f000 8083 	beq.w	8002398 <HAL_RCC_GetSysClockFreq+0x204>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f200 80a1 	bhi.w	80023dc <HAL_RCC_GetSysClockFreq+0x248>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x114>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d056      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022a6:	e099      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02d      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	08db      	lsrs	r3, r3, #3
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	4a6b      	ldr	r2, [pc, #428]	@ (800246c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022de:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800230e:	e087      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800247c <HAL_RCC_GetSysClockFreq+0x2e8>
 800231e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002322:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002332:	ed97 6a02 	vldr	s12, [r7, #8]
 8002336:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800233a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800233e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002352:	e065      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002376:	ed97 6a02 	vldr	s12, [r7, #8]
 800237a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800237e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800238a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002396:	e043      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002484 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80023be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023da:	e021      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002480 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002402:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002478 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800240a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800240e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800241e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	0a5b      	lsrs	r3, r3, #9
 8002426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800242a:	3301      	adds	r3, #1
 800242c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002438:	edd7 6a07 	vldr	s13, [r7, #28]
 800243c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002444:	ee17 3a90 	vmov	r3, s15
 8002448:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800244a:	e005      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
      break;
 8002450:	e002      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002454:	61bb      	str	r3, [r7, #24]
      break;
 8002456:	bf00      	nop
  }

  return sysclockfreq;
 8002458:	69bb      	ldr	r3, [r7, #24]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	58024400 	.word	0x58024400
 800246c:	03d09000 	.word	0x03d09000
 8002470:	003d0900 	.word	0x003d0900
 8002474:	017d7840 	.word	0x017d7840
 8002478:	46000000 	.word	0x46000000
 800247c:	4c742400 	.word	0x4c742400
 8002480:	4a742400 	.word	0x4a742400
 8002484:	4bbebc20 	.word	0x4bbebc20

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800248e:	f7ff fe81 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490f      	ldr	r1, [pc, #60]	@ (80024dc <HAL_RCC_GetHCLKFreq+0x54>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_RCC_GetHCLKFreq+0x54>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c6:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	58024400 	.word	0x58024400
 80024dc:	08005f30 	.word	0x08005f30
 80024e0:	24000004 	.word	0x24000004
 80024e4:	24000000 	.word	0x24000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80024ec:	f7ff ffcc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58024400 	.word	0x58024400
 8002510:	08005f30 	.word	0x08005f30

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002518:	f7ff ffb6 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x28>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	58024400 	.word	0x58024400
 800253c:	08005f30 	.word	0x08005f30

08002540 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b0c6      	sub	sp, #280	@ 0x118
 8002546:	af00      	add	r7, sp, #0
 8002548:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002564:	2500      	movs	r5, #0
 8002566:	ea54 0305 	orrs.w	r3, r4, r5
 800256a:	d049      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800256c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002576:	d02f      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800257c:	d828      	bhi.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800257e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002582:	d01a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002588:	d822      	bhi.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800258e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002592:	d007      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002594:	e01c      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002596:	4bab      	ldr	r3, [pc, #684]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	4aaa      	ldr	r2, [pc, #680]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025a2:	e01a      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025a8:	3308      	adds	r3, #8
 80025aa:	2102      	movs	r1, #2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fc25 	bl	8003dfc <RCCEx_PLL2_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025b8:	e00f      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025be:	3328      	adds	r3, #40	@ 0x28
 80025c0:	2102      	movs	r1, #2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fccc 	bl	8003f60 <RCCEx_PLL3_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025ce:	e004      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80025d6:	e000      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025e2:	4b98      	ldr	r3, [pc, #608]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80025ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f0:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025f2:	430b      	orrs	r3, r1
 80025f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80025f6:	e003      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80025fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800260c:	f04f 0900 	mov.w	r9, #0
 8002610:	ea58 0309 	orrs.w	r3, r8, r9
 8002614:	d047      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	2b04      	cmp	r3, #4
 800261e:	d82a      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002620:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	0800263d 	.word	0x0800263d
 800262c:	0800264b 	.word	0x0800264b
 8002630:	08002661 	.word	0x08002661
 8002634:	0800267f 	.word	0x0800267f
 8002638:	0800267f 	.word	0x0800267f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263c:	4b81      	ldr	r3, [pc, #516]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	4a80      	ldr	r2, [pc, #512]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002648:	e01a      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800264a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800264e:	3308      	adds	r3, #8
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f001 fbd2 	bl	8003dfc <RCCEx_PLL2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800265e:	e00f      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002664:	3328      	adds	r3, #40	@ 0x28
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fc79 	bl	8003f60 <RCCEx_PLL3_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002674:	e004      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800267c:	e000      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002688:	4b6e      	ldr	r3, [pc, #440]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800268a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268c:	f023 0107 	bic.w	r1, r3, #7
 8002690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	4a6b      	ldr	r2, [pc, #428]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002698:	430b      	orrs	r3, r1
 800269a:	6513      	str	r3, [r2, #80]	@ 0x50
 800269c:	e003      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80026a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80026b2:	f04f 0b00 	mov.w	fp, #0
 80026b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80026ba:	d05b      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80026bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026c4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80026c8:	d03b      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80026ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80026ce:	d834      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026d4:	d037      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80026d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026da:	d82e      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026e0:	d033      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80026e6:	d828      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ec:	d01a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f2:	d822      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80026f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026fc:	d007      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80026fe:	e01c      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002700:	4b50      	ldr	r3, [pc, #320]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	4a4f      	ldr	r2, [pc, #316]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e01e      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800270e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002712:	3308      	adds	r3, #8
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fb70 	bl	8003dfc <RCCEx_PLL2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002722:	e013      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002728:	3328      	adds	r3, #40	@ 0x28
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fc17 	bl	8003f60 <RCCEx_PLL3_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002738:	e008      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002740:	e004      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800274a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800274c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002754:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800275c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002764:	4a37      	ldr	r2, [pc, #220]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002766:	430b      	orrs	r3, r1
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
 800276a:	e003      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002770:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002780:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800278a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800278e:	460b      	mov	r3, r1
 8002790:	4313      	orrs	r3, r2
 8002792:	d05d      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002798:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800279c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80027a0:	d03b      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80027a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80027a6:	d834      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ac:	d037      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b2:	d82e      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027b8:	d033      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80027ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027be:	d828      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027c4:	d01a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80027c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027ca:	d822      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d4:	d007      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80027d6:	e01c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027e4:	e01e      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ea:	3308      	adds	r3, #8
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fb04 	bl	8003dfc <RCCEx_PLL2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027fa:	e013      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002800:	3328      	adds	r3, #40	@ 0x28
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fbab 	bl	8003f60 <RCCEx_PLL3_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002810:	e008      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002818:	e004      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002838:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800283c:	4a01      	ldr	r2, [pc, #4]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800283e:	430b      	orrs	r3, r1
 8002840:	6593      	str	r3, [r2, #88]	@ 0x58
 8002842:	e005      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800284c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800285c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002866:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800286a:	460b      	mov	r3, r1
 800286c:	4313      	orrs	r3, r2
 800286e:	d03a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	2b30      	cmp	r3, #48	@ 0x30
 8002878:	d01f      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800287a:	2b30      	cmp	r3, #48	@ 0x30
 800287c:	d819      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800287e:	2b20      	cmp	r3, #32
 8002880:	d00c      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002882:	2b20      	cmp	r3, #32
 8002884:	d815      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800288a:	2b10      	cmp	r3, #16
 800288c:	d111      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288e:	4baa      	ldr	r3, [pc, #680]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	4aa9      	ldr	r2, [pc, #676]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800289a:	e011      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800289c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028a0:	3308      	adds	r3, #8
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 faa9 	bl	8003dfc <RCCEx_PLL2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028b8:	e002      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80028be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80028d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	4a98      	ldr	r2, [pc, #608]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028d8:	430b      	orrs	r3, r1
 80028da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028dc:	e003      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80028f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80028fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002900:	460b      	mov	r3, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	d051      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002910:	d035      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002916:	d82e      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800291c:	d031      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800291e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002922:	d828      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002928:	d01a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800292e:	d822      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002938:	d007      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800293a:	e01c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	4a7d      	ldr	r2, [pc, #500]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002948:	e01c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800294e:	3308      	adds	r3, #8
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fa52 	bl	8003dfc <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800295e:	e011      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002964:	3328      	adds	r3, #40	@ 0x28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 faf9 	bl	8003f60 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800297c:	e002      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800298c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800298e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002990:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	4a67      	ldr	r2, [pc, #412]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800299c:	430b      	orrs	r3, r1
 800299e:	6513      	str	r3, [r2, #80]	@ 0x50
 80029a0:	e003      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80029b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4313      	orrs	r3, r2
 80029c8:	d053      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80029ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d4:	d033      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80029d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029da:	d82c      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80029dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029e0:	d02f      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80029e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029e6:	d826      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80029e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029ec:	d02b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80029ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029f2:	d820      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80029f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029f8:	d012      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80029fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029fe:	d81a      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d115      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a0e:	3308      	adds	r3, #8
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f9f2 	bl	8003dfc <RCCEx_PLL2_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a1e:	e015      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a24:	3328      	adds	r3, #40	@ 0x28
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fa99 	bl	8003f60 <RCCEx_PLL3_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a34:	e00a      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a54:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	4a35      	ldr	r2, [pc, #212]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a68:	e003      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002a88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	d058      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a9e:	d033      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa4:	d82c      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aaa:	d02f      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab0:	d826      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002ab2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ab6:	d02b      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002abc:	d820      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ac2:	d012      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ac8:	d81a      	bhi.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d022      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ad2:	d115      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ad8:	3308      	adds	r3, #8
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 f98d 	bl	8003dfc <RCCEx_PLL2_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ae8:	e015      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aee:	3328      	adds	r3, #40	@ 0x28
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fa34 	bl	8003f60 <RCCEx_PLL3_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002afe:	e00a      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b06:	e006      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10e      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b2e:	4a02      	ldr	r2, [pc, #8]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b34:	e006      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002b36:	bf00      	nop
 8002b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002b5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d037      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b6e:	d00e      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b74:	d816      	bhi.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d018      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4bc4      	ldr	r3, [pc, #784]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	4ac3      	ldr	r2, [pc, #780]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b8c:	e00f      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b92:	3308      	adds	r3, #8
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f930 	bl	8003dfc <RCCEx_PLL2_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ba2:	e004      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bb6:	4bb7      	ldr	r3, [pc, #732]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc4:	4ab3      	ldr	r2, [pc, #716]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bca:	e003      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	d039      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d81c      	bhi.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c15 	.word	0x08002c15
 8002c0c:	08002c23 	.word	0x08002c23
 8002c10:	08002c41 	.word	0x08002c41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c14:	4b9f      	ldr	r3, [pc, #636]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	4a9e      	ldr	r2, [pc, #632]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c20:	e00f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c26:	3308      	adds	r3, #8
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f8e6 	bl	8003dfc <RCCEx_PLL2_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c4a:	4b92      	ldr	r3, [pc, #584]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	f023 0103 	bic.w	r1, r3, #3
 8002c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c58:	4a8e      	ldr	r2, [pc, #568]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5e:	e003      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f000 8099 	beq.w	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8a:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a82      	ldr	r2, [pc, #520]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c96:	f7fe f92d 	bl	8000ef4 <HAL_GetTick>
 8002c9a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fe f928 	bl	8000ef4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	@ 0x64
 8002cae:	d903      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cb6:	e005      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb8:	4b77      	ldr	r3, [pc, #476]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ed      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d173      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ccc:	4b71      	ldr	r3, [pc, #452]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cd8:	4053      	eors	r3, r2
 8002cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cee:	4b69      	ldr	r3, [pc, #420]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a68      	ldr	r2, [pc, #416]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfa:	4b66      	ldr	r3, [pc, #408]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	4a65      	ldr	r2, [pc, #404]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d06:	4a63      	ldr	r2, [pc, #396]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f8ea 	bl	8000ef4 <HAL_GetTick>
 8002d20:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	e00d      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe f8e5 	bl	8000ef4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d30:	1ad2      	subs	r2, r2, r3
 8002d32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d903      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002d40:	e005      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d42:	4b54      	ldr	r3, [pc, #336]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0eb      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d129      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002d68:	4b4a      	ldr	r3, [pc, #296]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d78:	091a      	lsrs	r2, r3, #4
 8002d7a:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	4a45      	ldr	r2, [pc, #276]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6113      	str	r3, [r2, #16]
 8002d84:	e005      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002d86:	4b43      	ldr	r3, [pc, #268]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4a42      	ldr	r2, [pc, #264]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d90:	6113      	str	r3, [r2, #16]
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	4a3c      	ldr	r2, [pc, #240]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	e008      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002db2:	e003      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f002 0301 	and.w	r3, r2, #1
 8002dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002dd2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f000 808f 	beq.w	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002de4:	2b28      	cmp	r3, #40	@ 0x28
 8002de6:	d871      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002de8:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002ed5 	.word	0x08002ed5
 8002df4:	08002ecd 	.word	0x08002ecd
 8002df8:	08002ecd 	.word	0x08002ecd
 8002dfc:	08002ecd 	.word	0x08002ecd
 8002e00:	08002ecd 	.word	0x08002ecd
 8002e04:	08002ecd 	.word	0x08002ecd
 8002e08:	08002ecd 	.word	0x08002ecd
 8002e0c:	08002ecd 	.word	0x08002ecd
 8002e10:	08002ea1 	.word	0x08002ea1
 8002e14:	08002ecd 	.word	0x08002ecd
 8002e18:	08002ecd 	.word	0x08002ecd
 8002e1c:	08002ecd 	.word	0x08002ecd
 8002e20:	08002ecd 	.word	0x08002ecd
 8002e24:	08002ecd 	.word	0x08002ecd
 8002e28:	08002ecd 	.word	0x08002ecd
 8002e2c:	08002ecd 	.word	0x08002ecd
 8002e30:	08002eb7 	.word	0x08002eb7
 8002e34:	08002ecd 	.word	0x08002ecd
 8002e38:	08002ecd 	.word	0x08002ecd
 8002e3c:	08002ecd 	.word	0x08002ecd
 8002e40:	08002ecd 	.word	0x08002ecd
 8002e44:	08002ecd 	.word	0x08002ecd
 8002e48:	08002ecd 	.word	0x08002ecd
 8002e4c:	08002ecd 	.word	0x08002ecd
 8002e50:	08002ed5 	.word	0x08002ed5
 8002e54:	08002ecd 	.word	0x08002ecd
 8002e58:	08002ecd 	.word	0x08002ecd
 8002e5c:	08002ecd 	.word	0x08002ecd
 8002e60:	08002ecd 	.word	0x08002ecd
 8002e64:	08002ecd 	.word	0x08002ecd
 8002e68:	08002ecd 	.word	0x08002ecd
 8002e6c:	08002ecd 	.word	0x08002ecd
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002ecd 	.word	0x08002ecd
 8002e78:	08002ecd 	.word	0x08002ecd
 8002e7c:	08002ecd 	.word	0x08002ecd
 8002e80:	08002ecd 	.word	0x08002ecd
 8002e84:	08002ecd 	.word	0x08002ecd
 8002e88:	08002ecd 	.word	0x08002ecd
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002ed5 	.word	0x08002ed5
 8002e94:	58024400 	.word	0x58024400
 8002e98:	58024800 	.word	0x58024800
 8002e9c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 ffa7 	bl	8003dfc <RCCEx_PLL2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eb4:	e00f      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eba:	3328      	adds	r3, #40	@ 0x28
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 f84e 	bl	8003f60 <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eca:	e004      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ede:	4bbf      	ldr	r3, [pc, #764]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eec:	4abb      	ldr	r2, [pc, #748]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ef2:	e003      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f002 0302 	and.w	r3, r2, #2
 8002f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d041      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d824      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002f26:	a201      	add	r2, pc, #4	@ (adr r2, 8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f79 	.word	0x08002f79
 8002f30:	08002f45 	.word	0x08002f45
 8002f34:	08002f5b 	.word	0x08002f5b
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f79 	.word	0x08002f79
 8002f40:	08002f79 	.word	0x08002f79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f48:	3308      	adds	r3, #8
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 ff55 	bl	8003dfc <RCCEx_PLL2_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f58:	e00f      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f5e:	3328      	adds	r3, #40	@ 0x28
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fffc 	bl	8003f60 <RCCEx_PLL3_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f6e:	e004      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f76:	e000      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8002f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f82:	4b96      	ldr	r3, [pc, #600]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	f023 0107 	bic.w	r1, r3, #7
 8002f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f90:	4a92      	ldr	r2, [pc, #584]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f92:	430b      	orrs	r3, r1
 8002f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f96:	e003      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f002 0304 	and.w	r3, r2, #4
 8002fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fb6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	d044      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d825      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003021 	.word	0x08003021
 8002fd8:	08002fed 	.word	0x08002fed
 8002fdc:	08003003 	.word	0x08003003
 8002fe0:	08003021 	.word	0x08003021
 8002fe4:	08003021 	.word	0x08003021
 8002fe8:	08003021 	.word	0x08003021
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 ff01 	bl	8003dfc <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003000:	e00f      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003006:	3328      	adds	r3, #40	@ 0x28
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ffa8 	bl	8003f60 <RCCEx_PLL3_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003016:	e004      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10b      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800302a:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	f023 0107 	bic.w	r1, r3, #7
 8003032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	4a68      	ldr	r2, [pc, #416]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003040:	e003      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800304a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f002 0320 	and.w	r3, r2, #32
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003060:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003064:	460b      	mov	r3, r1
 8003066:	4313      	orrs	r3, r2
 8003068:	d055      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003076:	d033      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307c:	d82c      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003082:	d02f      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003088:	d826      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800308a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800308e:	d02b      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003090:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003094:	d820      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800309a:	d012      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800309c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030a0:	d81a      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d022      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80030a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030aa:	d115      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b0:	3308      	adds	r3, #8
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fea1 	bl	8003dfc <RCCEx_PLL2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030c0:	e015      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c6:	3328      	adds	r3, #40	@ 0x28
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff48 	bl	8003f60 <RCCEx_PLL3_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030d6:	e00a      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030de:	e006      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80030e0:	bf00      	nop
 80030e2:	e004      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80030e4:	bf00      	nop
 80030e6:	e002      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80030e8:	bf00      	nop
 80030ea:	e000      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80030ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003106:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003108:	430b      	orrs	r3, r1
 800310a:	6553      	str	r3, [r2, #84]	@ 0x54
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003112:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003122:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800312c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003130:	460b      	mov	r3, r1
 8003132:	4313      	orrs	r3, r2
 8003134:	d058      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800313a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800313e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003142:	d033      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003144:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003148:	d82c      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d02f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003154:	d826      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003156:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800315a:	d02b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800315c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003160:	d820      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003166:	d012      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800316c:	d81a      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d022      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003176:	d115      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317c:	3308      	adds	r3, #8
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fe3b 	bl	8003dfc <RCCEx_PLL2_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800318c:	e015      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800318e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003192:	3328      	adds	r3, #40	@ 0x28
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fee2 	bl	8003f60 <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031a2:	e00a      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031aa:	e006      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80031ac:	bf00      	nop
 80031ae:	e004      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80031b0:	bf00      	nop
 80031b2:	e002      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80031b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10e      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d2:	4a02      	ldr	r2, [pc, #8]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80031f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d055      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003210:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003214:	d033      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003216:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800321a:	d82c      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003220:	d02f      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003226:	d826      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003228:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800322c:	d02b      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800322e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003232:	d820      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003238:	d012      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800323a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800323e:	d81a      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d022      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003248:	d115      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800324e:	3308      	adds	r3, #8
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fdd2 	bl	8003dfc <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800325e:	e015      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	3328      	adds	r3, #40	@ 0x28
 8003266:	2102      	movs	r1, #2
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe79 	bl	8003f60 <RCCEx_PLL3_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003274:	e00a      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800327e:	bf00      	nop
 8003280:	e004      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800328a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003294:	4ba0      	ldr	r3, [pc, #640]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800329c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80032b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 0308 	and.w	r3, r2, #8
 80032c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d01e      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80032d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e6:	3328      	adds	r3, #40	@ 0x28
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fe38 	bl	8003f60 <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80032fc:	4b86      	ldr	r3, [pc, #536]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330c:	4a82      	ldr	r2, [pc, #520]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800330e:	430b      	orrs	r3, r1
 8003310:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f002 0310 	and.w	r3, r2, #16
 800331e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003328:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800332c:	460b      	mov	r3, r1
 800332e:	4313      	orrs	r3, r2
 8003330:	d01e      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333e:	d10c      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003344:	3328      	adds	r3, #40	@ 0x28
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fe09 	bl	8003f60 <RCCEx_PLL3_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800335a:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336a:	4a6b      	ldr	r2, [pc, #428]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800336c:	430b      	orrs	r3, r1
 800336e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800337c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800337e:	2300      	movs	r3, #0
 8003380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003382:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003386:	460b      	mov	r3, r1
 8003388:	4313      	orrs	r3, r2
 800338a:	d03e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800338c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003398:	d022      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800339a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800339e:	d81b      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80033aa:	e015      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b0:	3308      	adds	r3, #8
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd21 	bl	8003dfc <RCCEx_PLL2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033c0:	e00f      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c6:	3328      	adds	r3, #40	@ 0x28
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fdc8 	bl	8003f60 <RCCEx_PLL3_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033d6:	e004      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033de:	e000      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80033e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033fa:	4a47      	ldr	r2, [pc, #284]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003416:	673b      	str	r3, [r7, #112]	@ 0x70
 8003418:	2300      	movs	r3, #0
 800341a:	677b      	str	r3, [r7, #116]	@ 0x74
 800341c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003420:	460b      	mov	r3, r1
 8003422:	4313      	orrs	r3, r2
 8003424:	d03b      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003432:	d01f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003438:	d818      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343e:	d003      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003444:	d007      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003446:	e011      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4b33      	ldr	r3, [pc, #204]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003454:	e00f      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800345a:	3328      	adds	r3, #40	@ 0x28
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fd7e 	bl	8003f60 <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800346a:	e004      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348e:	4a22      	ldr	r2, [pc, #136]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6553      	str	r3, [r2, #84]	@ 0x54
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800349e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80034aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ac:	2300      	movs	r3, #0
 80034ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80034b4:	460b      	mov	r3, r1
 80034b6:	4313      	orrs	r3, r2
 80034b8:	d034      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d007      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	4a11      	ldr	r2, [pc, #68]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034d8:	e00e      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034de:	3308      	adds	r3, #8
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fc8a 	bl	8003dfc <RCCEx_PLL2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034ee:	e003      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	4a02      	ldr	r2, [pc, #8]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003510:	430b      	orrs	r3, r1
 8003512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003516:	bf00      	nop
 8003518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003530:	663b      	str	r3, [r7, #96]	@ 0x60
 8003532:	2300      	movs	r3, #0
 8003534:	667b      	str	r3, [r7, #100]	@ 0x64
 8003536:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d00c      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003544:	3328      	adds	r3, #40	@ 0x28
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fd09 	bl	8003f60 <RCCEx_PLL3_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800355a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003566:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003568:	2300      	movs	r3, #0
 800356a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800356c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d036      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800357c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003580:	d018      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003586:	d811      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358c:	d014      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800358e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003592:	d80b      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d011      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800359c:	d106      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359e:	4bb7      	ldr	r3, [pc, #732]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	4ab6      	ldr	r2, [pc, #728]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80035b4:	bf00      	nop
 80035b6:	e002      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c6:	4bad      	ldr	r3, [pc, #692]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d4:	4aa9      	ldr	r2, [pc, #676]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f2:	2300      	movs	r3, #0
 80035f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80035f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d009      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003600:	4b9e      	ldr	r3, [pc, #632]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a9b      	ldr	r2, [pc, #620]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003622:	2300      	movs	r3, #0
 8003624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003626:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003630:	4b92      	ldr	r3, [pc, #584]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003634:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800363e:	4a8f      	ldr	r2, [pc, #572]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003640:	430b      	orrs	r3, r1
 8003642:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003650:	643b      	str	r3, [r7, #64]	@ 0x40
 8003652:	2300      	movs	r3, #0
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
 8003656:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800365a:	460b      	mov	r3, r1
 800365c:	4313      	orrs	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003660:	4b86      	ldr	r3, [pc, #536]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a85      	ldr	r2, [pc, #532]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003666:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800366a:	6113      	str	r3, [r2, #16]
 800366c:	4b83      	ldr	r3, [pc, #524]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800366e:	6919      	ldr	r1, [r3, #16]
 8003670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003678:	4a80      	ldr	r2, [pc, #512]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800367a:	430b      	orrs	r3, r1
 800367c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800368a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800368c:	2300      	movs	r3, #0
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003690:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800369a:	4b78      	ldr	r3, [pc, #480]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	4a74      	ldr	r2, [pc, #464]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036aa:	430b      	orrs	r3, r1
 80036ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80036ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ca:	4b6c      	ldr	r3, [pc, #432]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80036d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	4a68      	ldr	r2, [pc, #416]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	2100      	movs	r1, #0
 80036ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80036f6:	460b      	mov	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	d011      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003700:	3308      	adds	r3, #8
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fb79 	bl	8003dfc <RCCEx_PLL2_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	2100      	movs	r1, #0
 800372a:	6239      	str	r1, [r7, #32]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
 8003732:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d011      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003740:	3308      	adds	r3, #8
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fb59 	bl	8003dfc <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	2100      	movs	r1, #0
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003776:	460b      	mov	r3, r1
 8003778:	4313      	orrs	r3, r2
 800377a:	d011      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800377c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003780:	3308      	adds	r3, #8
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fb39 	bl	8003dfc <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800379c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	2100      	movs	r1, #0
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d011      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c0:	3328      	adds	r3, #40	@ 0x28
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fbcb 	bl	8003f60 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80037d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	2100      	movs	r1, #0
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037f6:	460b      	mov	r3, r1
 80037f8:	4313      	orrs	r3, r2
 80037fa:	d011      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003800:	3328      	adds	r3, #40	@ 0x28
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fbab 	bl	8003f60 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	2100      	movs	r1, #0
 800382a:	6039      	str	r1, [r7, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d011      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003840:	3328      	adds	r3, #40	@ 0x28
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fb8b 	bl	8003f60 <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800385c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003860:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
}
 800386e:	4618      	mov	r0, r3
 8003870:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400

08003880 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003884:	f7fe fe00 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	58024400 	.word	0x58024400
 80038a8:	08005f30 	.word	0x08005f30

080038ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	@ 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038b4:	4ba1      	ldr	r3, [pc, #644]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038be:	4b9f      	ldr	r3, [pc, #636]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	0b1b      	lsrs	r3, r3, #12
 80038c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038ca:	4b9c      	ldr	r3, [pc, #624]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038d6:	4b99      	ldr	r3, [pc, #612]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8111 	beq.w	8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	f000 8083 	beq.w	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f200 80a1 	bhi.w	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d056      	beq.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003916:	e099      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003918:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02d      	beq.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003924:	4b85      	ldr	r3, [pc, #532]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	08db      	lsrs	r3, r3, #3
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	4a84      	ldr	r2, [pc, #528]	@ (8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
 8003934:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800397e:	e087      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c2:	e065      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b59      	ldr	r3, [pc, #356]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a06:	e043      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b48      	ldr	r3, [pc, #288]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4a:	e021      	b.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab6:	ee17 2a90 	vmov	r2, s15
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae4:	ee17 2a90 	vmov	r2, s15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003aec:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b12:	ee17 2a90 	vmov	r2, s15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b1a:	e008      	b.n	8003b2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	03d09000 	.word	0x03d09000
 8003b44:	46000000 	.word	0x46000000
 8003b48:	4c742400 	.word	0x4c742400
 8003b4c:	4a742400 	.word	0x4a742400
 8003b50:	4bbebc20 	.word	0x4bbebc20

08003b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	@ 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b5c:	4ba1      	ldr	r3, [pc, #644]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b66:	4b9f      	ldr	r3, [pc, #636]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	0d1b      	lsrs	r3, r3, #20
 8003b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b72:	4b9c      	ldr	r3, [pc, #624]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b7e:	4b99      	ldr	r3, [pc, #612]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8111 	beq.w	8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f000 8083 	beq.w	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f200 80a1 	bhi.w	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d056      	beq.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bbe:	e099      	b.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02d      	beq.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bcc:	4b85      	ldr	r3, [pc, #532]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	4a84      	ldr	r2, [pc, #528]	@ (8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c26:	e087      	b.n	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c6a:	e065      	b.n	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7e:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cae:	e043      	b.n	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	4b48      	ldr	r3, [pc, #288]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cf2:	e021      	b.n	8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d06:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d38:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	0a5b      	lsrs	r3, r3, #9
 8003d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5e:	ee17 2a90 	vmov	r2, s15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8c:	ee17 2a90 	vmov	r2, s15
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	0e1b      	lsrs	r3, r3, #24
 8003d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dba:	ee17 2a90 	vmov	r2, s15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	bf00      	nop
 8003dd8:	3724      	adds	r7, #36	@ 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	58024400 	.word	0x58024400
 8003de8:	03d09000 	.word	0x03d09000
 8003dec:	46000000 	.word	0x46000000
 8003df0:	4c742400 	.word	0x4c742400
 8003df4:	4a742400 	.word	0x4a742400
 8003df8:	4bbebc20 	.word	0x4bbebc20

08003dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e0a:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d101      	bne.n	8003e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e099      	b.n	8003f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e26:	f7fd f865 	bl	8000ef4 <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e2e:	f7fd f861 	bl	8000ef4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e086      	b.n	8003f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e40:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e4c:	4b42      	ldr	r3, [pc, #264]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	493f      	ldr	r1, [pc, #252]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	025b      	lsls	r3, r3, #9
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e90:	4931      	ldr	r1, [pc, #196]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e96:	4b30      	ldr	r3, [pc, #192]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	492d      	ldr	r1, [pc, #180]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	f023 0220 	bic.w	r2, r3, #32
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	4928      	ldr	r1, [pc, #160]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003eba:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	f023 0310 	bic.w	r3, r3, #16
 8003ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eca:	4b24      	ldr	r3, [pc, #144]	@ (8003f5c <RCCEx_PLL2_Config+0x160>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	69d2      	ldr	r2, [r2, #28]
 8003ed2:	00d2      	lsls	r2, r2, #3
 8003ed4:	4920      	ldr	r1, [pc, #128]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003eda:	4b1f      	ldr	r3, [pc, #124]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a1e      	ldr	r2, [pc, #120]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	f043 0310 	orr.w	r3, r3, #16
 8003ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003eec:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ef8:	e00f      	b.n	8003f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f0c:	e005      	b.n	8003f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f0e:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f26:	f7fc ffe5 	bl	8000ef4 <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f2c:	e008      	b.n	8003f40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f2e:	f7fc ffe1 	bl	8000ef4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e006      	b.n	8003f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	ffff0007 	.word	0xffff0007

08003f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f6e:	4b53      	ldr	r3, [pc, #332]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d101      	bne.n	8003f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e099      	b.n	80040b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4e      	ldr	r2, [pc, #312]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fc ffb3 	bl	8000ef4 <HAL_GetTick>
 8003f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f92:	f7fc ffaf 	bl	8000ef4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e086      	b.n	80040b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fa4:	4b45      	ldr	r3, [pc, #276]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fb0:	4b42      	ldr	r3, [pc, #264]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	051b      	lsls	r3, r3, #20
 8003fbe:	493f      	ldr	r1, [pc, #252]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	025b      	lsls	r3, r3, #9
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ff4:	4931      	ldr	r1, [pc, #196]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ffa:	4b30      	ldr	r3, [pc, #192]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	492d      	ldr	r1, [pc, #180]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4928      	ldr	r1, [pc, #160]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800401e:	4b27      	ldr	r3, [pc, #156]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	4a26      	ldr	r2, [pc, #152]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800402a:	4b24      	ldr	r3, [pc, #144]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 800402c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402e:	4b24      	ldr	r3, [pc, #144]	@ (80040c0 <RCCEx_PLL3_Config+0x160>)
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	69d2      	ldr	r2, [r2, #28]
 8004036:	00d2      	lsls	r2, r2, #3
 8004038:	4920      	ldr	r1, [pc, #128]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800403e:	4b1f      	ldr	r3, [pc, #124]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	4a1e      	ldr	r2, [pc, #120]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004050:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004056:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800405c:	e00f      	b.n	800407e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d106      	bne.n	8004072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004064:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	4a14      	ldr	r2, [pc, #80]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 800406a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800406e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004070:	e005      	b.n	800407e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004072:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	4a11      	ldr	r2, [pc, #68]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800407e:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0e      	ldr	r2, [pc, #56]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408a:	f7fc ff33 	bl	8000ef4 <HAL_GetTick>
 800408e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004090:	e008      	b.n	80040a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004092:	f7fc ff2f 	bl	8000ef4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <RCCEx_PLL3_Config+0x15c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	58024400 	.word	0x58024400
 80040c0:	ffff0007 	.word	0xffff0007

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e042      	b.n	800415c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fc fd0b 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2224      	movs	r2, #36	@ 0x24
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 ff22 	bl	8004f58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8b3 	bl	8004280 <UART_SetConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01b      	b.n	800415c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 ffa1 	bl	800509c <UART_CheckIdleState>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	2b20      	cmp	r3, #32
 800417c:	d17b      	bne.n	8004276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_UART_Transmit+0x26>
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e074      	b.n	8004278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2221      	movs	r2, #33	@ 0x21
 800419a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419e:	f7fc fea9 	bl	8000ef4 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041bc:	d108      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e003      	b.n	80041d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041d8:	e030      	b.n	800423c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	@ 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 f803 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e03d      	b.n	8004278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3302      	adds	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e007      	b.n	800422a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1c8      	bne.n	80041da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	@ 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 ffcc 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e006      	b.n	8004278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b092      	sub	sp, #72	@ 0x48
 8004286:	af00      	add	r7, sp, #0
 8004288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	431a      	orrs	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4bbe      	ldr	r3, [pc, #760]	@ (80045a8 <UART_SetConfig+0x328>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4ab3      	ldr	r2, [pc, #716]	@ (80045ac <UART_SetConfig+0x32c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e8:	4313      	orrs	r3, r2
 80042ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	4baf      	ldr	r3, [pc, #700]	@ (80045b0 <UART_SetConfig+0x330>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	f023 010f 	bic.w	r1, r3, #15
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4aa6      	ldr	r2, [pc, #664]	@ (80045b4 <UART_SetConfig+0x334>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d177      	bne.n	8004410 <UART_SetConfig+0x190>
 8004320:	4ba5      	ldr	r3, [pc, #660]	@ (80045b8 <UART_SetConfig+0x338>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004328:	2b28      	cmp	r3, #40	@ 0x28
 800432a:	d86d      	bhi.n	8004408 <UART_SetConfig+0x188>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <UART_SetConfig+0xb4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	080043d9 	.word	0x080043d9
 8004338:	08004409 	.word	0x08004409
 800433c:	08004409 	.word	0x08004409
 8004340:	08004409 	.word	0x08004409
 8004344:	08004409 	.word	0x08004409
 8004348:	08004409 	.word	0x08004409
 800434c:	08004409 	.word	0x08004409
 8004350:	08004409 	.word	0x08004409
 8004354:	080043e1 	.word	0x080043e1
 8004358:	08004409 	.word	0x08004409
 800435c:	08004409 	.word	0x08004409
 8004360:	08004409 	.word	0x08004409
 8004364:	08004409 	.word	0x08004409
 8004368:	08004409 	.word	0x08004409
 800436c:	08004409 	.word	0x08004409
 8004370:	08004409 	.word	0x08004409
 8004374:	080043e9 	.word	0x080043e9
 8004378:	08004409 	.word	0x08004409
 800437c:	08004409 	.word	0x08004409
 8004380:	08004409 	.word	0x08004409
 8004384:	08004409 	.word	0x08004409
 8004388:	08004409 	.word	0x08004409
 800438c:	08004409 	.word	0x08004409
 8004390:	08004409 	.word	0x08004409
 8004394:	080043f1 	.word	0x080043f1
 8004398:	08004409 	.word	0x08004409
 800439c:	08004409 	.word	0x08004409
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004409 	.word	0x08004409
 80043a8:	08004409 	.word	0x08004409
 80043ac:	08004409 	.word	0x08004409
 80043b0:	08004409 	.word	0x08004409
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	08004409 	.word	0x08004409
 80043bc:	08004409 	.word	0x08004409
 80043c0:	08004409 	.word	0x08004409
 80043c4:	08004409 	.word	0x08004409
 80043c8:	08004409 	.word	0x08004409
 80043cc:	08004409 	.word	0x08004409
 80043d0:	08004409 	.word	0x08004409
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e326      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e6:	e322      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ee:	e31e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f6:	e31a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fe:	e316      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004400:	2340      	movs	r3, #64	@ 0x40
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004406:	e312      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004408:	2380      	movs	r3, #128	@ 0x80
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e30e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a69      	ldr	r2, [pc, #420]	@ (80045bc <UART_SetConfig+0x33c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d130      	bne.n	800447c <UART_SetConfig+0x1fc>
 800441a:	4b67      	ldr	r3, [pc, #412]	@ (80045b8 <UART_SetConfig+0x338>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b05      	cmp	r3, #5
 8004424:	d826      	bhi.n	8004474 <UART_SetConfig+0x1f4>
 8004426:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <UART_SetConfig+0x1ac>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004445 	.word	0x08004445
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004455 	.word	0x08004455
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444a:	e2f0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004452:	e2ec      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445a:	e2e8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004462:	e2e4      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004464:	2320      	movs	r3, #32
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446a:	e2e0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800446c:	2340      	movs	r3, #64	@ 0x40
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004472:	e2dc      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447a:	e2d8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4f      	ldr	r2, [pc, #316]	@ (80045c0 <UART_SetConfig+0x340>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d130      	bne.n	80044e8 <UART_SetConfig+0x268>
 8004486:	4b4c      	ldr	r3, [pc, #304]	@ (80045b8 <UART_SetConfig+0x338>)
 8004488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	2b05      	cmp	r3, #5
 8004490:	d826      	bhi.n	80044e0 <UART_SetConfig+0x260>
 8004492:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <UART_SetConfig+0x218>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044b1 	.word	0x080044b1
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b6:	e2ba      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044be:	e2b6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c6:	e2b2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ce:	e2ae      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044d0:	2320      	movs	r3, #32
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d6:	e2aa      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044d8:	2340      	movs	r3, #64	@ 0x40
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044de:	e2a6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044e0:	2380      	movs	r3, #128	@ 0x80
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e6:	e2a2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <UART_SetConfig+0x344>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d130      	bne.n	8004554 <UART_SetConfig+0x2d4>
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <UART_SetConfig+0x338>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d826      	bhi.n	800454c <UART_SetConfig+0x2cc>
 80044fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004504 <UART_SetConfig+0x284>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004525 	.word	0x08004525
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004522:	e284      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452a:	e280      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004532:	e27c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453a:	e278      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800453c:	2320      	movs	r3, #32
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004542:	e274      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004544:	2340      	movs	r3, #64	@ 0x40
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454a:	e270      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004552:	e26c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <UART_SetConfig+0x348>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d142      	bne.n	80045e4 <UART_SetConfig+0x364>
 800455e:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <UART_SetConfig+0x338>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b05      	cmp	r3, #5
 8004568:	d838      	bhi.n	80045dc <UART_SetConfig+0x35c>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0x2f0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004589 	.word	0x08004589
 8004574:	08004591 	.word	0x08004591
 8004578:	08004599 	.word	0x08004599
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045cd 	.word	0x080045cd
 8004584:	080045d5 	.word	0x080045d5
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458e:	e24e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004596:	e24a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459e:	e246      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a6:	e242      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045a8:	cfff69f3 	.word	0xcfff69f3
 80045ac:	58000c00 	.word	0x58000c00
 80045b0:	11fff4ff 	.word	0x11fff4ff
 80045b4:	40011000 	.word	0x40011000
 80045b8:	58024400 	.word	0x58024400
 80045bc:	40004400 	.word	0x40004400
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	40005000 	.word	0x40005000
 80045cc:	2320      	movs	r3, #32
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e22c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045d4:	2340      	movs	r3, #64	@ 0x40
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e228      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e224      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4ab1      	ldr	r2, [pc, #708]	@ (80048b0 <UART_SetConfig+0x630>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d176      	bne.n	80046dc <UART_SetConfig+0x45c>
 80045ee:	4bb1      	ldr	r3, [pc, #708]	@ (80048b4 <UART_SetConfig+0x634>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045f6:	2b28      	cmp	r3, #40	@ 0x28
 80045f8:	d86c      	bhi.n	80046d4 <UART_SetConfig+0x454>
 80045fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <UART_SetConfig+0x380>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	080046a5 	.word	0x080046a5
 8004604:	080046d5 	.word	0x080046d5
 8004608:	080046d5 	.word	0x080046d5
 800460c:	080046d5 	.word	0x080046d5
 8004610:	080046d5 	.word	0x080046d5
 8004614:	080046d5 	.word	0x080046d5
 8004618:	080046d5 	.word	0x080046d5
 800461c:	080046d5 	.word	0x080046d5
 8004620:	080046ad 	.word	0x080046ad
 8004624:	080046d5 	.word	0x080046d5
 8004628:	080046d5 	.word	0x080046d5
 800462c:	080046d5 	.word	0x080046d5
 8004630:	080046d5 	.word	0x080046d5
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046b5 	.word	0x080046b5
 8004644:	080046d5 	.word	0x080046d5
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046bd 	.word	0x080046bd
 8004664:	080046d5 	.word	0x080046d5
 8004668:	080046d5 	.word	0x080046d5
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046d5 	.word	0x080046d5
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046d5 	.word	0x080046d5
 8004688:	080046d5 	.word	0x080046d5
 800468c:	080046d5 	.word	0x080046d5
 8004690:	080046d5 	.word	0x080046d5
 8004694:	080046d5 	.word	0x080046d5
 8004698:	080046d5 	.word	0x080046d5
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e1c0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046ac:	2304      	movs	r3, #4
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e1bc      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046b4:	2308      	movs	r3, #8
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e1b8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e1b4      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046c4:	2320      	movs	r3, #32
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ca:	e1b0      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046cc:	2340      	movs	r3, #64	@ 0x40
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e1ac      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e1a8      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a75      	ldr	r2, [pc, #468]	@ (80048b8 <UART_SetConfig+0x638>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d130      	bne.n	8004748 <UART_SetConfig+0x4c8>
 80046e6:	4b73      	ldr	r3, [pc, #460]	@ (80048b4 <UART_SetConfig+0x634>)
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d826      	bhi.n	8004740 <UART_SetConfig+0x4c0>
 80046f2:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <UART_SetConfig+0x478>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
 8004700:	08004721 	.word	0x08004721
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004716:	e18a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004718:	2304      	movs	r3, #4
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471e:	e186      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004720:	2308      	movs	r3, #8
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e182      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004728:	2310      	movs	r3, #16
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e17e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004730:	2320      	movs	r3, #32
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004736:	e17a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004738:	2340      	movs	r3, #64	@ 0x40
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e176      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004740:	2380      	movs	r3, #128	@ 0x80
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e172      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5b      	ldr	r2, [pc, #364]	@ (80048bc <UART_SetConfig+0x63c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d130      	bne.n	80047b4 <UART_SetConfig+0x534>
 8004752:	4b58      	ldr	r3, [pc, #352]	@ (80048b4 <UART_SetConfig+0x634>)
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b05      	cmp	r3, #5
 800475c:	d826      	bhi.n	80047ac <UART_SetConfig+0x52c>
 800475e:	a201      	add	r2, pc, #4	@ (adr r2, 8004764 <UART_SetConfig+0x4e4>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	0800477d 	.word	0x0800477d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004782:	e154      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478a:	e150      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004792:	e14c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479a:	e148      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800479c:	2320      	movs	r3, #32
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a2:	e144      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047a4:	2340      	movs	r3, #64	@ 0x40
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047aa:	e140      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b2:	e13c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a41      	ldr	r2, [pc, #260]	@ (80048c0 <UART_SetConfig+0x640>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f040 8082 	bne.w	80048c4 <UART_SetConfig+0x644>
 80047c0:	4b3c      	ldr	r3, [pc, #240]	@ (80048b4 <UART_SetConfig+0x634>)
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c8:	2b28      	cmp	r3, #40	@ 0x28
 80047ca:	d86d      	bhi.n	80048a8 <UART_SetConfig+0x628>
 80047cc:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <UART_SetConfig+0x554>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	08004879 	.word	0x08004879
 80047d8:	080048a9 	.word	0x080048a9
 80047dc:	080048a9 	.word	0x080048a9
 80047e0:	080048a9 	.word	0x080048a9
 80047e4:	080048a9 	.word	0x080048a9
 80047e8:	080048a9 	.word	0x080048a9
 80047ec:	080048a9 	.word	0x080048a9
 80047f0:	080048a9 	.word	0x080048a9
 80047f4:	08004881 	.word	0x08004881
 80047f8:	080048a9 	.word	0x080048a9
 80047fc:	080048a9 	.word	0x080048a9
 8004800:	080048a9 	.word	0x080048a9
 8004804:	080048a9 	.word	0x080048a9
 8004808:	080048a9 	.word	0x080048a9
 800480c:	080048a9 	.word	0x080048a9
 8004810:	080048a9 	.word	0x080048a9
 8004814:	08004889 	.word	0x08004889
 8004818:	080048a9 	.word	0x080048a9
 800481c:	080048a9 	.word	0x080048a9
 8004820:	080048a9 	.word	0x080048a9
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080048a9 	.word	0x080048a9
 800482c:	080048a9 	.word	0x080048a9
 8004830:	080048a9 	.word	0x080048a9
 8004834:	08004891 	.word	0x08004891
 8004838:	080048a9 	.word	0x080048a9
 800483c:	080048a9 	.word	0x080048a9
 8004840:	080048a9 	.word	0x080048a9
 8004844:	080048a9 	.word	0x080048a9
 8004848:	080048a9 	.word	0x080048a9
 800484c:	080048a9 	.word	0x080048a9
 8004850:	080048a9 	.word	0x080048a9
 8004854:	08004899 	.word	0x08004899
 8004858:	080048a9 	.word	0x080048a9
 800485c:	080048a9 	.word	0x080048a9
 8004860:	080048a9 	.word	0x080048a9
 8004864:	080048a9 	.word	0x080048a9
 8004868:	080048a9 	.word	0x080048a9
 800486c:	080048a9 	.word	0x080048a9
 8004870:	080048a9 	.word	0x080048a9
 8004874:	080048a1 	.word	0x080048a1
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e0d6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e0d2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e0ce      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004896:	e0ca      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004898:	2320      	movs	r3, #32
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e0c6      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048a0:	2340      	movs	r3, #64	@ 0x40
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e0c2      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e0be      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80048b0:	40011400 	.word	0x40011400
 80048b4:	58024400 	.word	0x58024400
 80048b8:	40007800 	.word	0x40007800
 80048bc:	40007c00 	.word	0x40007c00
 80048c0:	40011800 	.word	0x40011800
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4aad      	ldr	r2, [pc, #692]	@ (8004b80 <UART_SetConfig+0x900>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d176      	bne.n	80049bc <UART_SetConfig+0x73c>
 80048ce:	4bad      	ldr	r3, [pc, #692]	@ (8004b84 <UART_SetConfig+0x904>)
 80048d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d6:	2b28      	cmp	r3, #40	@ 0x28
 80048d8:	d86c      	bhi.n	80049b4 <UART_SetConfig+0x734>
 80048da:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0x660>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004985 	.word	0x08004985
 80048e4:	080049b5 	.word	0x080049b5
 80048e8:	080049b5 	.word	0x080049b5
 80048ec:	080049b5 	.word	0x080049b5
 80048f0:	080049b5 	.word	0x080049b5
 80048f4:	080049b5 	.word	0x080049b5
 80048f8:	080049b5 	.word	0x080049b5
 80048fc:	080049b5 	.word	0x080049b5
 8004900:	0800498d 	.word	0x0800498d
 8004904:	080049b5 	.word	0x080049b5
 8004908:	080049b5 	.word	0x080049b5
 800490c:	080049b5 	.word	0x080049b5
 8004910:	080049b5 	.word	0x080049b5
 8004914:	080049b5 	.word	0x080049b5
 8004918:	080049b5 	.word	0x080049b5
 800491c:	080049b5 	.word	0x080049b5
 8004920:	08004995 	.word	0x08004995
 8004924:	080049b5 	.word	0x080049b5
 8004928:	080049b5 	.word	0x080049b5
 800492c:	080049b5 	.word	0x080049b5
 8004930:	080049b5 	.word	0x080049b5
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049b5 	.word	0x080049b5
 800493c:	080049b5 	.word	0x080049b5
 8004940:	0800499d 	.word	0x0800499d
 8004944:	080049b5 	.word	0x080049b5
 8004948:	080049b5 	.word	0x080049b5
 800494c:	080049b5 	.word	0x080049b5
 8004950:	080049b5 	.word	0x080049b5
 8004954:	080049b5 	.word	0x080049b5
 8004958:	080049b5 	.word	0x080049b5
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049a5 	.word	0x080049a5
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049b5 	.word	0x080049b5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498a:	e050      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004992:	e04c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499a:	e048      	b.n	8004a2e <UART_SetConfig+0x7ae>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e044      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e040      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049ac:	2340      	movs	r3, #64	@ 0x40
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e03c      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e038      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a71      	ldr	r2, [pc, #452]	@ (8004b88 <UART_SetConfig+0x908>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d130      	bne.n	8004a28 <UART_SetConfig+0x7a8>
 80049c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b84 <UART_SetConfig+0x904>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d826      	bhi.n	8004a20 <UART_SetConfig+0x7a0>
 80049d2:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <UART_SetConfig+0x758>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f6:	e01a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fe:	e016      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a06:	e012      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e00e      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e00a      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a18:	2340      	movs	r3, #64	@ 0x40
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e006      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a20:	2380      	movs	r3, #128	@ 0x80
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e002      	b.n	8004a2e <UART_SetConfig+0x7ae>
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <UART_SetConfig+0x908>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f040 80f8 	bne.w	8004c2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	dc46      	bgt.n	8004ad0 <UART_SetConfig+0x850>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	db75      	blt.n	8004b32 <UART_SetConfig+0x8b2>
 8004a46:	3b02      	subs	r3, #2
 8004a48:	2b1e      	cmp	r3, #30
 8004a4a:	d872      	bhi.n	8004b32 <UART_SetConfig+0x8b2>
 8004a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x7d4>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004ad7 	.word	0x08004ad7
 8004a58:	08004b33 	.word	0x08004b33
 8004a5c:	08004adf 	.word	0x08004adf
 8004a60:	08004b33 	.word	0x08004b33
 8004a64:	08004b33 	.word	0x08004b33
 8004a68:	08004b33 	.word	0x08004b33
 8004a6c:	08004aef 	.word	0x08004aef
 8004a70:	08004b33 	.word	0x08004b33
 8004a74:	08004b33 	.word	0x08004b33
 8004a78:	08004b33 	.word	0x08004b33
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004b33 	.word	0x08004b33
 8004a84:	08004b33 	.word	0x08004b33
 8004a88:	08004b33 	.word	0x08004b33
 8004a8c:	08004aff 	.word	0x08004aff
 8004a90:	08004b33 	.word	0x08004b33
 8004a94:	08004b33 	.word	0x08004b33
 8004a98:	08004b33 	.word	0x08004b33
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004b33 	.word	0x08004b33
 8004aa4:	08004b33 	.word	0x08004b33
 8004aa8:	08004b33 	.word	0x08004b33
 8004aac:	08004b33 	.word	0x08004b33
 8004ab0:	08004b33 	.word	0x08004b33
 8004ab4:	08004b33 	.word	0x08004b33
 8004ab8:	08004b33 	.word	0x08004b33
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b33 	.word	0x08004b33
 8004ac4:	08004b33 	.word	0x08004b33
 8004ac8:	08004b33 	.word	0x08004b33
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d02a      	beq.n	8004b2a <UART_SetConfig+0x8aa>
 8004ad4:	e02d      	b.n	8004b32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ad6:	f7fe fed3 	bl	8003880 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004adc:	e02f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fee2 	bl	80038ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aec:	e027      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aee:	f107 0318 	add.w	r3, r7, #24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f82e 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004afc:	e01f      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004afe:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <UART_SetConfig+0x904>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b84 <UART_SetConfig+0x904>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <UART_SetConfig+0x90c>)
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b1c:	e00f      	b.n	8004b3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <UART_SetConfig+0x90c>)
 8004b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b22:	e00c      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	@ (8004b90 <UART_SetConfig+0x910>)
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 81ee 	beq.w	8004f22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <UART_SetConfig+0x914>)
 8004b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b58:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d305      	bcc.n	8004b76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b7c:	e1d1      	b.n	8004f22 <UART_SetConfig+0xca2>
 8004b7e:	bf00      	nop
 8004b80:	40011c00 	.word	0x40011c00
 8004b84:	58024400 	.word	0x58024400
 8004b88:	58000c00 	.word	0x58000c00
 8004b8c:	03d09000 	.word	0x03d09000
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	08005f40 	.word	0x08005f40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	4ac0      	ldr	r2, [pc, #768]	@ (8004ea8 <UART_SetConfig+0xc28>)
 8004ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bba:	f7fb fc01 	bl	80003c0 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	020b      	lsls	r3, r1, #8
 8004bd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bd4:	0202      	lsls	r2, r0, #8
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	6849      	ldr	r1, [r1, #4]
 8004bda:	0849      	lsrs	r1, r1, #1
 8004bdc:	2000      	movs	r0, #0
 8004bde:	460c      	mov	r4, r1
 8004be0:	4605      	mov	r5, r0
 8004be2:	eb12 0804 	adds.w	r8, r2, r4
 8004be6:	eb43 0905 	adc.w	r9, r3, r5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	4693      	mov	fp, r2
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb fbe0 	bl	80003c0 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4613      	mov	r3, r2
 8004c06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c0e:	d308      	bcc.n	8004c22 <UART_SetConfig+0x9a2>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c16:	d204      	bcs.n	8004c22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e17f      	b.n	8004f22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c28:	e17b      	b.n	8004f22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c32:	f040 80bd 	bne.w	8004db0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004c36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	dc48      	bgt.n	8004cd0 <UART_SetConfig+0xa50>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db7b      	blt.n	8004d3a <UART_SetConfig+0xaba>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d879      	bhi.n	8004d3a <UART_SetConfig+0xaba>
 8004c46:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <UART_SetConfig+0x9cc>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004cd7 	.word	0x08004cd7
 8004c50:	08004cdf 	.word	0x08004cdf
 8004c54:	08004d3b 	.word	0x08004d3b
 8004c58:	08004d3b 	.word	0x08004d3b
 8004c5c:	08004ce7 	.word	0x08004ce7
 8004c60:	08004d3b 	.word	0x08004d3b
 8004c64:	08004d3b 	.word	0x08004d3b
 8004c68:	08004d3b 	.word	0x08004d3b
 8004c6c:	08004cf7 	.word	0x08004cf7
 8004c70:	08004d3b 	.word	0x08004d3b
 8004c74:	08004d3b 	.word	0x08004d3b
 8004c78:	08004d3b 	.word	0x08004d3b
 8004c7c:	08004d3b 	.word	0x08004d3b
 8004c80:	08004d3b 	.word	0x08004d3b
 8004c84:	08004d3b 	.word	0x08004d3b
 8004c88:	08004d3b 	.word	0x08004d3b
 8004c8c:	08004d07 	.word	0x08004d07
 8004c90:	08004d3b 	.word	0x08004d3b
 8004c94:	08004d3b 	.word	0x08004d3b
 8004c98:	08004d3b 	.word	0x08004d3b
 8004c9c:	08004d3b 	.word	0x08004d3b
 8004ca0:	08004d3b 	.word	0x08004d3b
 8004ca4:	08004d3b 	.word	0x08004d3b
 8004ca8:	08004d3b 	.word	0x08004d3b
 8004cac:	08004d3b 	.word	0x08004d3b
 8004cb0:	08004d3b 	.word	0x08004d3b
 8004cb4:	08004d3b 	.word	0x08004d3b
 8004cb8:	08004d3b 	.word	0x08004d3b
 8004cbc:	08004d3b 	.word	0x08004d3b
 8004cc0:	08004d3b 	.word	0x08004d3b
 8004cc4:	08004d3b 	.word	0x08004d3b
 8004cc8:	08004d3b 	.word	0x08004d3b
 8004ccc:	08004d2d 	.word	0x08004d2d
 8004cd0:	2b40      	cmp	r3, #64	@ 0x40
 8004cd2:	d02e      	beq.n	8004d32 <UART_SetConfig+0xab2>
 8004cd4:	e031      	b.n	8004d3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7fd fc07 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004cdc:	e033      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cde:	f7fd fc19 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8004ce2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ce4:	e02f      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fdde 	bl	80038ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cf4:	e027      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf6:	f107 0318 	add.w	r3, r7, #24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe ff2a 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d04:	e01f      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d06:	4b69      	ldr	r3, [pc, #420]	@ (8004eac <UART_SetConfig+0xc2c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d12:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <UART_SetConfig+0xc2c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	4a64      	ldr	r2, [pc, #400]	@ (8004eb0 <UART_SetConfig+0xc30>)
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d24:	e00f      	b.n	8004d46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004d26:	4b62      	ldr	r3, [pc, #392]	@ (8004eb0 <UART_SetConfig+0xc30>)
 8004d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d2a:	e00c      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d2c:	4b61      	ldr	r3, [pc, #388]	@ (8004eb4 <UART_SetConfig+0xc34>)
 8004d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80ea 	beq.w	8004f22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	4a55      	ldr	r2, [pc, #340]	@ (8004ea8 <UART_SetConfig+0xc28>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d60:	005a      	lsls	r2, r3, #1
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	441a      	add	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d916      	bls.n	8004da8 <UART_SetConfig+0xb28>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d80:	d212      	bcs.n	8004da8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f023 030f 	bic.w	r3, r3, #15
 8004d8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e0bc      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004dae:	e0b8      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	dc4b      	bgt.n	8004e50 <UART_SetConfig+0xbd0>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f2c0 8087 	blt.w	8004ecc <UART_SetConfig+0xc4c>
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	f200 8084 	bhi.w	8004ecc <UART_SetConfig+0xc4c>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <UART_SetConfig+0xb4c>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e57 	.word	0x08004e57
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004ecd 	.word	0x08004ecd
 8004dd8:	08004ecd 	.word	0x08004ecd
 8004ddc:	08004e67 	.word	0x08004e67
 8004de0:	08004ecd 	.word	0x08004ecd
 8004de4:	08004ecd 	.word	0x08004ecd
 8004de8:	08004ecd 	.word	0x08004ecd
 8004dec:	08004e77 	.word	0x08004e77
 8004df0:	08004ecd 	.word	0x08004ecd
 8004df4:	08004ecd 	.word	0x08004ecd
 8004df8:	08004ecd 	.word	0x08004ecd
 8004dfc:	08004ecd 	.word	0x08004ecd
 8004e00:	08004ecd 	.word	0x08004ecd
 8004e04:	08004ecd 	.word	0x08004ecd
 8004e08:	08004ecd 	.word	0x08004ecd
 8004e0c:	08004e87 	.word	0x08004e87
 8004e10:	08004ecd 	.word	0x08004ecd
 8004e14:	08004ecd 	.word	0x08004ecd
 8004e18:	08004ecd 	.word	0x08004ecd
 8004e1c:	08004ecd 	.word	0x08004ecd
 8004e20:	08004ecd 	.word	0x08004ecd
 8004e24:	08004ecd 	.word	0x08004ecd
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004ecd 	.word	0x08004ecd
 8004e30:	08004ecd 	.word	0x08004ecd
 8004e34:	08004ecd 	.word	0x08004ecd
 8004e38:	08004ecd 	.word	0x08004ecd
 8004e3c:	08004ecd 	.word	0x08004ecd
 8004e40:	08004ecd 	.word	0x08004ecd
 8004e44:	08004ecd 	.word	0x08004ecd
 8004e48:	08004ecd 	.word	0x08004ecd
 8004e4c:	08004ebf 	.word	0x08004ebf
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d037      	beq.n	8004ec4 <UART_SetConfig+0xc44>
 8004e54:	e03a      	b.n	8004ecc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fd fb47 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e5c:	e03c      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5e:	f7fd fb59 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8004e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e64:	e038      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fd1e 	bl	80038ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e74:	e030      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e76:	f107 0318 	add.w	r3, r7, #24
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fe6a 	bl	8003b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e84:	e028      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e86:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <UART_SetConfig+0xc2c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <UART_SetConfig+0xc2c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	4a04      	ldr	r2, [pc, #16]	@ (8004eb0 <UART_SetConfig+0xc30>)
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ea4:	e018      	b.n	8004ed8 <UART_SetConfig+0xc58>
 8004ea6:	bf00      	nop
 8004ea8:	08005f40 	.word	0x08005f40
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	03d09000 	.word	0x03d09000
 8004eb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <UART_SetConfig+0xccc>)
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ebc:	e00c      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ebe:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <UART_SetConfig+0xcd0>)
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec2:	e009      	b.n	8004ed8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eca:	e005      	b.n	8004ed8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ed6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d021      	beq.n	8004f22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f54 <UART_SetConfig+0xcd4>)
 8004ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eec:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	441a      	add	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d909      	bls.n	8004f1c <UART_SetConfig+0xc9c>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0e:	d205      	bcs.n	8004f1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e002      	b.n	8004f22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f3e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3748      	adds	r7, #72	@ 0x48
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4c:	03d09000 	.word	0x03d09000
 8004f50:	003d0900 	.word	0x003d0900
 8004f54:	08005f40 	.word	0x08005f40

08004f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d10a      	bne.n	800506e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b098      	sub	sp, #96	@ 0x60
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fb ff22 	bl	8000ef4 <HAL_GetTick>
 80050b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d12f      	bne.n	8005120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f88e 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d022      	beq.n	8005120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e063      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d149      	bne.n	80051c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005136:	2200      	movs	r2, #0
 8005138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f857 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03c      	beq.n	80051c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	623b      	str	r3, [r7, #32]
   return(result);
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800515c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005166:	633b      	str	r3, [r7, #48]	@ 0x30
 8005168:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60fb      	str	r3, [r7, #12]
   return(result);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	617b      	str	r3, [r7, #20]
   return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e012      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3758      	adds	r7, #88	@ 0x58
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e04f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d04b      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fb fe73 	bl	8000ef4 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <UART_WaitOnFlagUntilTimeout+0x30>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e04e      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d037      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d034      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b40      	cmp	r3, #64	@ 0x40
 800523c:	d031      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d110      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2208      	movs	r2, #8
 8005252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f839 	bl	80052cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2208      	movs	r2, #8
 800525e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e029      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527c:	d111      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f81f 	bl	80052cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0a0      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b095      	sub	sp, #84	@ 0x54
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	61fb      	str	r3, [r7, #28]
   return(result);
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <UART_EndRxTransfer+0xc8>)
 800531a:	4013      	ands	r3, r2
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d118      	bne.n	8005374 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f023 0310 	bic.w	r3, r3, #16
 8005356:	647b      	str	r3, [r7, #68]	@ 0x44
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6979      	ldr	r1, [r7, #20]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	613b      	str	r3, [r7, #16]
   return(result);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e6      	bne.n	8005342 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005388:	bf00      	nop
 800538a:	3754      	adds	r7, #84	@ 0x54
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	effffffe 	.word	0xeffffffe

08005398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_UARTEx_DisableFifoMode+0x16>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e027      	b.n	80053fe <HAL_UARTEx_DisableFifoMode+0x66>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2224      	movs	r2, #36	@ 0x24
 80053ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800541e:	2302      	movs	r3, #2
 8005420:	e02d      	b.n	800547e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	@ 0x24
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f850 	bl	8005504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800549a:	2302      	movs	r3, #2
 800549c:	e02d      	b.n	80054fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2224      	movs	r2, #36	@ 0x24
 80054aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f812 	bl	8005504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005524:	e031      	b.n	800558a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005526:	2310      	movs	r3, #16
 8005528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800552a:	2310      	movs	r3, #16
 800552c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	0e5b      	lsrs	r3, r3, #25
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	0f5b      	lsrs	r3, r3, #29
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	7b3a      	ldrb	r2, [r7, #12]
 8005552:	4911      	ldr	r1, [pc, #68]	@ (8005598 <UARTEx_SetNbDataToProcess+0x94>)
 8005554:	5c8a      	ldrb	r2, [r1, r2]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800555a:	7b3a      	ldrb	r2, [r7, #12]
 800555c:	490f      	ldr	r1, [pc, #60]	@ (800559c <UARTEx_SetNbDataToProcess+0x98>)
 800555e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005560:	fb93 f3f2 	sdiv	r3, r3, r2
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	7b7a      	ldrb	r2, [r7, #13]
 8005570:	4909      	ldr	r1, [pc, #36]	@ (8005598 <UARTEx_SetNbDataToProcess+0x94>)
 8005572:	5c8a      	ldrb	r2, [r1, r2]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005578:	7b7a      	ldrb	r2, [r7, #13]
 800557a:	4908      	ldr	r1, [pc, #32]	@ (800559c <UARTEx_SetNbDataToProcess+0x98>)
 800557c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	08005f58 	.word	0x08005f58
 800559c:	08005f60 	.word	0x08005f60

080055a0 <siprintf>:
 80055a0:	b40e      	push	{r1, r2, r3}
 80055a2:	b500      	push	{lr}
 80055a4:	b09c      	sub	sp, #112	@ 0x70
 80055a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80055a8:	9002      	str	r0, [sp, #8]
 80055aa:	9006      	str	r0, [sp, #24]
 80055ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055b0:	4809      	ldr	r0, [pc, #36]	@ (80055d8 <siprintf+0x38>)
 80055b2:	9107      	str	r1, [sp, #28]
 80055b4:	9104      	str	r1, [sp, #16]
 80055b6:	4909      	ldr	r1, [pc, #36]	@ (80055dc <siprintf+0x3c>)
 80055b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055bc:	9105      	str	r1, [sp, #20]
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	a902      	add	r1, sp, #8
 80055c4:	f000 f994 	bl	80058f0 <_svfiprintf_r>
 80055c8:	9b02      	ldr	r3, [sp, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	b01c      	add	sp, #112	@ 0x70
 80055d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d4:	b003      	add	sp, #12
 80055d6:	4770      	bx	lr
 80055d8:	24000010 	.word	0x24000010
 80055dc:	ffff0208 	.word	0xffff0208

080055e0 <memset>:
 80055e0:	4402      	add	r2, r0
 80055e2:	4603      	mov	r3, r0
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d100      	bne.n	80055ea <memset+0xa>
 80055e8:	4770      	bx	lr
 80055ea:	f803 1b01 	strb.w	r1, [r3], #1
 80055ee:	e7f9      	b.n	80055e4 <memset+0x4>

080055f0 <__errno>:
 80055f0:	4b01      	ldr	r3, [pc, #4]	@ (80055f8 <__errno+0x8>)
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	24000010 	.word	0x24000010

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005634 <__libc_init_array+0x38>)
 8005600:	4c0d      	ldr	r4, [pc, #52]	@ (8005638 <__libc_init_array+0x3c>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	2600      	movs	r6, #0
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	4d0b      	ldr	r5, [pc, #44]	@ (800563c <__libc_init_array+0x40>)
 800560e:	4c0c      	ldr	r4, [pc, #48]	@ (8005640 <__libc_init_array+0x44>)
 8005610:	f000 fc66 	bl	8005ee0 <_init>
 8005614:	1b64      	subs	r4, r4, r5
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	2600      	movs	r6, #0
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	08005fa4 	.word	0x08005fa4
 8005638:	08005fa4 	.word	0x08005fa4
 800563c:	08005fa4 	.word	0x08005fa4
 8005640:	08005fa8 	.word	0x08005fa8

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <_free_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4605      	mov	r5, r0
 800564c:	2900      	cmp	r1, #0
 800564e:	d041      	beq.n	80056d4 <_free_r+0x8c>
 8005650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005654:	1f0c      	subs	r4, r1, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfb8      	it	lt
 800565a:	18e4      	addlt	r4, r4, r3
 800565c:	f000 f8e0 	bl	8005820 <__malloc_lock>
 8005660:	4a1d      	ldr	r2, [pc, #116]	@ (80056d8 <_free_r+0x90>)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x2c>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	4628      	mov	r0, r5
 800566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005670:	f000 b8dc 	b.w	800582c <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x42>
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	1821      	adds	r1, r4, r0
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1809      	addeq	r1, r1, r0
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x1e>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x4c>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x42>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1850      	adds	r0, r2, r1
 8005698:	42a0      	cmp	r0, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x6c>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	4401      	add	r1, r0
 80056a0:	1850      	adds	r0, r2, r1
 80056a2:	4283      	cmp	r3, r0
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x22>
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	4408      	add	r0, r1
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	e7da      	b.n	800566a <_free_r+0x22>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x74>
 80056b6:	230c      	movs	r3, #12
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x22>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1809      	addeq	r1, r1, r0
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	6054      	str	r4, [r2, #4]
 80056d2:	e7ca      	b.n	800566a <_free_r+0x22>
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	24000328 	.word	0x24000328

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0f      	ldr	r6, [pc, #60]	@ (800571c <sbrk_aligned+0x40>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 fba6 	bl	8005e38 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fba1 	bl	8005e38 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d103      	bne.n	8005702 <sbrk_aligned+0x26>
 80056fa:	f04f 34ff 	mov.w	r4, #4294967295
 80056fe:	4620      	mov	r0, r4
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	1cc4      	adds	r4, r0, #3
 8005704:	f024 0403 	bic.w	r4, r4, #3
 8005708:	42a0      	cmp	r0, r4
 800570a:	d0f8      	beq.n	80056fe <sbrk_aligned+0x22>
 800570c:	1a21      	subs	r1, r4, r0
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fb92 	bl	8005e38 <_sbrk_r>
 8005714:	3001      	adds	r0, #1
 8005716:	d1f2      	bne.n	80056fe <sbrk_aligned+0x22>
 8005718:	e7ef      	b.n	80056fa <sbrk_aligned+0x1e>
 800571a:	bf00      	nop
 800571c:	24000324 	.word	0x24000324

08005720 <_malloc_r>:
 8005720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005724:	1ccd      	adds	r5, r1, #3
 8005726:	f025 0503 	bic.w	r5, r5, #3
 800572a:	3508      	adds	r5, #8
 800572c:	2d0c      	cmp	r5, #12
 800572e:	bf38      	it	cc
 8005730:	250c      	movcc	r5, #12
 8005732:	2d00      	cmp	r5, #0
 8005734:	4606      	mov	r6, r0
 8005736:	db01      	blt.n	800573c <_malloc_r+0x1c>
 8005738:	42a9      	cmp	r1, r5
 800573a:	d904      	bls.n	8005746 <_malloc_r+0x26>
 800573c:	230c      	movs	r3, #12
 800573e:	6033      	str	r3, [r6, #0]
 8005740:	2000      	movs	r0, #0
 8005742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800581c <_malloc_r+0xfc>
 800574a:	f000 f869 	bl	8005820 <__malloc_lock>
 800574e:	f8d8 3000 	ldr.w	r3, [r8]
 8005752:	461c      	mov	r4, r3
 8005754:	bb44      	cbnz	r4, 80057a8 <_malloc_r+0x88>
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f7ff ffbf 	bl	80056dc <sbrk_aligned>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	4604      	mov	r4, r0
 8005762:	d158      	bne.n	8005816 <_malloc_r+0xf6>
 8005764:	f8d8 4000 	ldr.w	r4, [r8]
 8005768:	4627      	mov	r7, r4
 800576a:	2f00      	cmp	r7, #0
 800576c:	d143      	bne.n	80057f6 <_malloc_r+0xd6>
 800576e:	2c00      	cmp	r4, #0
 8005770:	d04b      	beq.n	800580a <_malloc_r+0xea>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	4639      	mov	r1, r7
 8005776:	4630      	mov	r0, r6
 8005778:	eb04 0903 	add.w	r9, r4, r3
 800577c:	f000 fb5c 	bl	8005e38 <_sbrk_r>
 8005780:	4581      	cmp	r9, r0
 8005782:	d142      	bne.n	800580a <_malloc_r+0xea>
 8005784:	6821      	ldr	r1, [r4, #0]
 8005786:	1a6d      	subs	r5, r5, r1
 8005788:	4629      	mov	r1, r5
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ffa6 	bl	80056dc <sbrk_aligned>
 8005790:	3001      	adds	r0, #1
 8005792:	d03a      	beq.n	800580a <_malloc_r+0xea>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	442b      	add	r3, r5
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	f8d8 3000 	ldr.w	r3, [r8]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	bb62      	cbnz	r2, 80057fc <_malloc_r+0xdc>
 80057a2:	f8c8 7000 	str.w	r7, [r8]
 80057a6:	e00f      	b.n	80057c8 <_malloc_r+0xa8>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	1b52      	subs	r2, r2, r5
 80057ac:	d420      	bmi.n	80057f0 <_malloc_r+0xd0>
 80057ae:	2a0b      	cmp	r2, #11
 80057b0:	d917      	bls.n	80057e2 <_malloc_r+0xc2>
 80057b2:	1961      	adds	r1, r4, r5
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	6059      	strne	r1, [r3, #4]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	bf08      	it	eq
 80057c0:	f8c8 1000 	streq.w	r1, [r8]
 80057c4:	5162      	str	r2, [r4, r5]
 80057c6:	604b      	str	r3, [r1, #4]
 80057c8:	4630      	mov	r0, r6
 80057ca:	f000 f82f 	bl	800582c <__malloc_unlock>
 80057ce:	f104 000b 	add.w	r0, r4, #11
 80057d2:	1d23      	adds	r3, r4, #4
 80057d4:	f020 0007 	bic.w	r0, r0, #7
 80057d8:	1ac2      	subs	r2, r0, r3
 80057da:	bf1c      	itt	ne
 80057dc:	1a1b      	subne	r3, r3, r0
 80057de:	50a3      	strne	r3, [r4, r2]
 80057e0:	e7af      	b.n	8005742 <_malloc_r+0x22>
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	bf0c      	ite	eq
 80057e8:	f8c8 2000 	streq.w	r2, [r8]
 80057ec:	605a      	strne	r2, [r3, #4]
 80057ee:	e7eb      	b.n	80057c8 <_malloc_r+0xa8>
 80057f0:	4623      	mov	r3, r4
 80057f2:	6864      	ldr	r4, [r4, #4]
 80057f4:	e7ae      	b.n	8005754 <_malloc_r+0x34>
 80057f6:	463c      	mov	r4, r7
 80057f8:	687f      	ldr	r7, [r7, #4]
 80057fa:	e7b6      	b.n	800576a <_malloc_r+0x4a>
 80057fc:	461a      	mov	r2, r3
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	42a3      	cmp	r3, r4
 8005802:	d1fb      	bne.n	80057fc <_malloc_r+0xdc>
 8005804:	2300      	movs	r3, #0
 8005806:	6053      	str	r3, [r2, #4]
 8005808:	e7de      	b.n	80057c8 <_malloc_r+0xa8>
 800580a:	230c      	movs	r3, #12
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	4630      	mov	r0, r6
 8005810:	f000 f80c 	bl	800582c <__malloc_unlock>
 8005814:	e794      	b.n	8005740 <_malloc_r+0x20>
 8005816:	6005      	str	r5, [r0, #0]
 8005818:	e7d6      	b.n	80057c8 <_malloc_r+0xa8>
 800581a:	bf00      	nop
 800581c:	24000328 	.word	0x24000328

08005820 <__malloc_lock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_lock+0x8>)
 8005822:	f7ff bf0f 	b.w	8005644 <__retarget_lock_acquire_recursive>
 8005826:	bf00      	nop
 8005828:	24000320 	.word	0x24000320

0800582c <__malloc_unlock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_unlock+0x8>)
 800582e:	f7ff bf0a 	b.w	8005646 <__retarget_lock_release_recursive>
 8005832:	bf00      	nop
 8005834:	24000320 	.word	0x24000320

08005838 <__ssputs_r>:
 8005838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	688e      	ldr	r6, [r1, #8]
 800583e:	461f      	mov	r7, r3
 8005840:	42be      	cmp	r6, r7
 8005842:	680b      	ldr	r3, [r1, #0]
 8005844:	4682      	mov	sl, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4690      	mov	r8, r2
 800584a:	d82d      	bhi.n	80058a8 <__ssputs_r+0x70>
 800584c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005854:	d026      	beq.n	80058a4 <__ssputs_r+0x6c>
 8005856:	6965      	ldr	r5, [r4, #20]
 8005858:	6909      	ldr	r1, [r1, #16]
 800585a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800585e:	eba3 0901 	sub.w	r9, r3, r1
 8005862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005866:	1c7b      	adds	r3, r7, #1
 8005868:	444b      	add	r3, r9
 800586a:	106d      	asrs	r5, r5, #1
 800586c:	429d      	cmp	r5, r3
 800586e:	bf38      	it	cc
 8005870:	461d      	movcc	r5, r3
 8005872:	0553      	lsls	r3, r2, #21
 8005874:	d527      	bpl.n	80058c6 <__ssputs_r+0x8e>
 8005876:	4629      	mov	r1, r5
 8005878:	f7ff ff52 	bl	8005720 <_malloc_r>
 800587c:	4606      	mov	r6, r0
 800587e:	b360      	cbz	r0, 80058da <__ssputs_r+0xa2>
 8005880:	6921      	ldr	r1, [r4, #16]
 8005882:	464a      	mov	r2, r9
 8005884:	f000 fae8 	bl	8005e58 <memcpy>
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800588e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005892:	81a3      	strh	r3, [r4, #12]
 8005894:	6126      	str	r6, [r4, #16]
 8005896:	6165      	str	r5, [r4, #20]
 8005898:	444e      	add	r6, r9
 800589a:	eba5 0509 	sub.w	r5, r5, r9
 800589e:	6026      	str	r6, [r4, #0]
 80058a0:	60a5      	str	r5, [r4, #8]
 80058a2:	463e      	mov	r6, r7
 80058a4:	42be      	cmp	r6, r7
 80058a6:	d900      	bls.n	80058aa <__ssputs_r+0x72>
 80058a8:	463e      	mov	r6, r7
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	4632      	mov	r2, r6
 80058ae:	4641      	mov	r1, r8
 80058b0:	f000 faa8 	bl	8005e04 <memmove>
 80058b4:	68a3      	ldr	r3, [r4, #8]
 80058b6:	1b9b      	subs	r3, r3, r6
 80058b8:	60a3      	str	r3, [r4, #8]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4433      	add	r3, r6
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	2000      	movs	r0, #0
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	462a      	mov	r2, r5
 80058c8:	f000 fad4 	bl	8005e74 <_realloc_r>
 80058cc:	4606      	mov	r6, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d1e0      	bne.n	8005894 <__ssputs_r+0x5c>
 80058d2:	6921      	ldr	r1, [r4, #16]
 80058d4:	4650      	mov	r0, sl
 80058d6:	f7ff feb7 	bl	8005648 <_free_r>
 80058da:	230c      	movs	r3, #12
 80058dc:	f8ca 3000 	str.w	r3, [sl]
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e7e9      	b.n	80058c2 <__ssputs_r+0x8a>
	...

080058f0 <_svfiprintf_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	4698      	mov	r8, r3
 80058f6:	898b      	ldrh	r3, [r1, #12]
 80058f8:	061b      	lsls	r3, r3, #24
 80058fa:	b09d      	sub	sp, #116	@ 0x74
 80058fc:	4607      	mov	r7, r0
 80058fe:	460d      	mov	r5, r1
 8005900:	4614      	mov	r4, r2
 8005902:	d510      	bpl.n	8005926 <_svfiprintf_r+0x36>
 8005904:	690b      	ldr	r3, [r1, #16]
 8005906:	b973      	cbnz	r3, 8005926 <_svfiprintf_r+0x36>
 8005908:	2140      	movs	r1, #64	@ 0x40
 800590a:	f7ff ff09 	bl	8005720 <_malloc_r>
 800590e:	6028      	str	r0, [r5, #0]
 8005910:	6128      	str	r0, [r5, #16]
 8005912:	b930      	cbnz	r0, 8005922 <_svfiprintf_r+0x32>
 8005914:	230c      	movs	r3, #12
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	b01d      	add	sp, #116	@ 0x74
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	2340      	movs	r3, #64	@ 0x40
 8005924:	616b      	str	r3, [r5, #20]
 8005926:	2300      	movs	r3, #0
 8005928:	9309      	str	r3, [sp, #36]	@ 0x24
 800592a:	2320      	movs	r3, #32
 800592c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	2330      	movs	r3, #48	@ 0x30
 8005936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ad4 <_svfiprintf_r+0x1e4>
 800593a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800593e:	f04f 0901 	mov.w	r9, #1
 8005942:	4623      	mov	r3, r4
 8005944:	469a      	mov	sl, r3
 8005946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800594a:	b10a      	cbz	r2, 8005950 <_svfiprintf_r+0x60>
 800594c:	2a25      	cmp	r2, #37	@ 0x25
 800594e:	d1f9      	bne.n	8005944 <_svfiprintf_r+0x54>
 8005950:	ebba 0b04 	subs.w	fp, sl, r4
 8005954:	d00b      	beq.n	800596e <_svfiprintf_r+0x7e>
 8005956:	465b      	mov	r3, fp
 8005958:	4622      	mov	r2, r4
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ff6b 	bl	8005838 <__ssputs_r>
 8005962:	3001      	adds	r0, #1
 8005964:	f000 80a7 	beq.w	8005ab6 <_svfiprintf_r+0x1c6>
 8005968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800596a:	445a      	add	r2, fp
 800596c:	9209      	str	r2, [sp, #36]	@ 0x24
 800596e:	f89a 3000 	ldrb.w	r3, [sl]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 809f 	beq.w	8005ab6 <_svfiprintf_r+0x1c6>
 8005978:	2300      	movs	r3, #0
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005982:	f10a 0a01 	add.w	sl, sl, #1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	9307      	str	r3, [sp, #28]
 800598a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800598e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005990:	4654      	mov	r4, sl
 8005992:	2205      	movs	r2, #5
 8005994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005998:	484e      	ldr	r0, [pc, #312]	@ (8005ad4 <_svfiprintf_r+0x1e4>)
 800599a:	f7fa fcc1 	bl	8000320 <memchr>
 800599e:	9a04      	ldr	r2, [sp, #16]
 80059a0:	b9d8      	cbnz	r0, 80059da <_svfiprintf_r+0xea>
 80059a2:	06d0      	lsls	r0, r2, #27
 80059a4:	bf44      	itt	mi
 80059a6:	2320      	movmi	r3, #32
 80059a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ac:	0711      	lsls	r1, r2, #28
 80059ae:	bf44      	itt	mi
 80059b0:	232b      	movmi	r3, #43	@ 0x2b
 80059b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80059bc:	d015      	beq.n	80059ea <_svfiprintf_r+0xfa>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	4654      	mov	r4, sl
 80059c2:	2000      	movs	r0, #0
 80059c4:	f04f 0c0a 	mov.w	ip, #10
 80059c8:	4621      	mov	r1, r4
 80059ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ce:	3b30      	subs	r3, #48	@ 0x30
 80059d0:	2b09      	cmp	r3, #9
 80059d2:	d94b      	bls.n	8005a6c <_svfiprintf_r+0x17c>
 80059d4:	b1b0      	cbz	r0, 8005a04 <_svfiprintf_r+0x114>
 80059d6:	9207      	str	r2, [sp, #28]
 80059d8:	e014      	b.n	8005a04 <_svfiprintf_r+0x114>
 80059da:	eba0 0308 	sub.w	r3, r0, r8
 80059de:	fa09 f303 	lsl.w	r3, r9, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	46a2      	mov	sl, r4
 80059e8:	e7d2      	b.n	8005990 <_svfiprintf_r+0xa0>
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	9103      	str	r1, [sp, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfbb      	ittet	lt
 80059f6:	425b      	neglt	r3, r3
 80059f8:	f042 0202 	orrlt.w	r2, r2, #2
 80059fc:	9307      	strge	r3, [sp, #28]
 80059fe:	9307      	strlt	r3, [sp, #28]
 8005a00:	bfb8      	it	lt
 8005a02:	9204      	strlt	r2, [sp, #16]
 8005a04:	7823      	ldrb	r3, [r4, #0]
 8005a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a08:	d10a      	bne.n	8005a20 <_svfiprintf_r+0x130>
 8005a0a:	7863      	ldrb	r3, [r4, #1]
 8005a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a0e:	d132      	bne.n	8005a76 <_svfiprintf_r+0x186>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9203      	str	r2, [sp, #12]
 8005a18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a1c:	3402      	adds	r4, #2
 8005a1e:	9305      	str	r3, [sp, #20]
 8005a20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ae4 <_svfiprintf_r+0x1f4>
 8005a24:	7821      	ldrb	r1, [r4, #0]
 8005a26:	2203      	movs	r2, #3
 8005a28:	4650      	mov	r0, sl
 8005a2a:	f7fa fc79 	bl	8000320 <memchr>
 8005a2e:	b138      	cbz	r0, 8005a40 <_svfiprintf_r+0x150>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	eba0 000a 	sub.w	r0, r0, sl
 8005a36:	2240      	movs	r2, #64	@ 0x40
 8005a38:	4082      	lsls	r2, r0
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a44:	4824      	ldr	r0, [pc, #144]	@ (8005ad8 <_svfiprintf_r+0x1e8>)
 8005a46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a4a:	2206      	movs	r2, #6
 8005a4c:	f7fa fc68 	bl	8000320 <memchr>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d036      	beq.n	8005ac2 <_svfiprintf_r+0x1d2>
 8005a54:	4b21      	ldr	r3, [pc, #132]	@ (8005adc <_svfiprintf_r+0x1ec>)
 8005a56:	bb1b      	cbnz	r3, 8005aa0 <_svfiprintf_r+0x1b0>
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	3307      	adds	r3, #7
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	3308      	adds	r3, #8
 8005a62:	9303      	str	r3, [sp, #12]
 8005a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a66:	4433      	add	r3, r6
 8005a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a6a:	e76a      	b.n	8005942 <_svfiprintf_r+0x52>
 8005a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a70:	460c      	mov	r4, r1
 8005a72:	2001      	movs	r0, #1
 8005a74:	e7a8      	b.n	80059c8 <_svfiprintf_r+0xd8>
 8005a76:	2300      	movs	r3, #0
 8005a78:	3401      	adds	r4, #1
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f04f 0c0a 	mov.w	ip, #10
 8005a82:	4620      	mov	r0, r4
 8005a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a88:	3a30      	subs	r2, #48	@ 0x30
 8005a8a:	2a09      	cmp	r2, #9
 8005a8c:	d903      	bls.n	8005a96 <_svfiprintf_r+0x1a6>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0c6      	beq.n	8005a20 <_svfiprintf_r+0x130>
 8005a92:	9105      	str	r1, [sp, #20]
 8005a94:	e7c4      	b.n	8005a20 <_svfiprintf_r+0x130>
 8005a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7f0      	b.n	8005a82 <_svfiprintf_r+0x192>
 8005aa0:	ab03      	add	r3, sp, #12
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae0 <_svfiprintf_r+0x1f0>)
 8005aa8:	a904      	add	r1, sp, #16
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f3af 8000 	nop.w
 8005ab0:	1c42      	adds	r2, r0, #1
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	d1d6      	bne.n	8005a64 <_svfiprintf_r+0x174>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	065b      	lsls	r3, r3, #25
 8005aba:	f53f af2d 	bmi.w	8005918 <_svfiprintf_r+0x28>
 8005abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ac0:	e72c      	b.n	800591c <_svfiprintf_r+0x2c>
 8005ac2:	ab03      	add	r3, sp, #12
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <_svfiprintf_r+0x1f0>)
 8005aca:	a904      	add	r1, sp, #16
 8005acc:	4638      	mov	r0, r7
 8005ace:	f000 f879 	bl	8005bc4 <_printf_i>
 8005ad2:	e7ed      	b.n	8005ab0 <_svfiprintf_r+0x1c0>
 8005ad4:	08005f68 	.word	0x08005f68
 8005ad8:	08005f72 	.word	0x08005f72
 8005adc:	00000000 	.word	0x00000000
 8005ae0:	08005839 	.word	0x08005839
 8005ae4:	08005f6e 	.word	0x08005f6e

08005ae8 <_printf_common>:
 8005ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	4616      	mov	r6, r2
 8005aee:	4698      	mov	r8, r3
 8005af0:	688a      	ldr	r2, [r1, #8]
 8005af2:	690b      	ldr	r3, [r1, #16]
 8005af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bfb8      	it	lt
 8005afc:	4613      	movlt	r3, r2
 8005afe:	6033      	str	r3, [r6, #0]
 8005b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b04:	4607      	mov	r7, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	b10a      	cbz	r2, 8005b0e <_printf_common+0x26>
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	6033      	str	r3, [r6, #0]
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	0699      	lsls	r1, r3, #26
 8005b12:	bf42      	ittt	mi
 8005b14:	6833      	ldrmi	r3, [r6, #0]
 8005b16:	3302      	addmi	r3, #2
 8005b18:	6033      	strmi	r3, [r6, #0]
 8005b1a:	6825      	ldr	r5, [r4, #0]
 8005b1c:	f015 0506 	ands.w	r5, r5, #6
 8005b20:	d106      	bne.n	8005b30 <_printf_common+0x48>
 8005b22:	f104 0a19 	add.w	sl, r4, #25
 8005b26:	68e3      	ldr	r3, [r4, #12]
 8005b28:	6832      	ldr	r2, [r6, #0]
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	42ab      	cmp	r3, r5
 8005b2e:	dc26      	bgt.n	8005b7e <_printf_common+0x96>
 8005b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	3b00      	subs	r3, #0
 8005b38:	bf18      	it	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	0692      	lsls	r2, r2, #26
 8005b3e:	d42b      	bmi.n	8005b98 <_printf_common+0xb0>
 8005b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b44:	4641      	mov	r1, r8
 8005b46:	4638      	mov	r0, r7
 8005b48:	47c8      	blx	r9
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d01e      	beq.n	8005b8c <_printf_common+0xa4>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	6922      	ldr	r2, [r4, #16]
 8005b52:	f003 0306 	and.w	r3, r3, #6
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	bf02      	ittt	eq
 8005b5a:	68e5      	ldreq	r5, [r4, #12]
 8005b5c:	6833      	ldreq	r3, [r6, #0]
 8005b5e:	1aed      	subeq	r5, r5, r3
 8005b60:	68a3      	ldr	r3, [r4, #8]
 8005b62:	bf0c      	ite	eq
 8005b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b68:	2500      	movne	r5, #0
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	bfc4      	itt	gt
 8005b6e:	1a9b      	subgt	r3, r3, r2
 8005b70:	18ed      	addgt	r5, r5, r3
 8005b72:	2600      	movs	r6, #0
 8005b74:	341a      	adds	r4, #26
 8005b76:	42b5      	cmp	r5, r6
 8005b78:	d11a      	bne.n	8005bb0 <_printf_common+0xc8>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e008      	b.n	8005b90 <_printf_common+0xa8>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	4641      	mov	r1, r8
 8005b84:	4638      	mov	r0, r7
 8005b86:	47c8      	blx	r9
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d103      	bne.n	8005b94 <_printf_common+0xac>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b94:	3501      	adds	r5, #1
 8005b96:	e7c6      	b.n	8005b26 <_printf_common+0x3e>
 8005b98:	18e1      	adds	r1, r4, r3
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	2030      	movs	r0, #48	@ 0x30
 8005b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ba2:	4422      	add	r2, r4
 8005ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bac:	3302      	adds	r3, #2
 8005bae:	e7c7      	b.n	8005b40 <_printf_common+0x58>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	47c8      	blx	r9
 8005bba:	3001      	adds	r0, #1
 8005bbc:	d0e6      	beq.n	8005b8c <_printf_common+0xa4>
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7d9      	b.n	8005b76 <_printf_common+0x8e>
	...

08005bc4 <_printf_i>:
 8005bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	7e0f      	ldrb	r7, [r1, #24]
 8005bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bcc:	2f78      	cmp	r7, #120	@ 0x78
 8005bce:	4691      	mov	r9, r2
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	469a      	mov	sl, r3
 8005bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bda:	d807      	bhi.n	8005bec <_printf_i+0x28>
 8005bdc:	2f62      	cmp	r7, #98	@ 0x62
 8005bde:	d80a      	bhi.n	8005bf6 <_printf_i+0x32>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	f000 80d2 	beq.w	8005d8a <_printf_i+0x1c6>
 8005be6:	2f58      	cmp	r7, #88	@ 0x58
 8005be8:	f000 80b9 	beq.w	8005d5e <_printf_i+0x19a>
 8005bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bf4:	e03a      	b.n	8005c6c <_printf_i+0xa8>
 8005bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bfa:	2b15      	cmp	r3, #21
 8005bfc:	d8f6      	bhi.n	8005bec <_printf_i+0x28>
 8005bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8005c04 <_printf_i+0x40>)
 8005c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c04:	08005c5d 	.word	0x08005c5d
 8005c08:	08005c71 	.word	0x08005c71
 8005c0c:	08005bed 	.word	0x08005bed
 8005c10:	08005bed 	.word	0x08005bed
 8005c14:	08005bed 	.word	0x08005bed
 8005c18:	08005bed 	.word	0x08005bed
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005bed 	.word	0x08005bed
 8005c24:	08005bed 	.word	0x08005bed
 8005c28:	08005bed 	.word	0x08005bed
 8005c2c:	08005bed 	.word	0x08005bed
 8005c30:	08005d71 	.word	0x08005d71
 8005c34:	08005c9b 	.word	0x08005c9b
 8005c38:	08005d2b 	.word	0x08005d2b
 8005c3c:	08005bed 	.word	0x08005bed
 8005c40:	08005bed 	.word	0x08005bed
 8005c44:	08005d93 	.word	0x08005d93
 8005c48:	08005bed 	.word	0x08005bed
 8005c4c:	08005c9b 	.word	0x08005c9b
 8005c50:	08005bed 	.word	0x08005bed
 8005c54:	08005bed 	.word	0x08005bed
 8005c58:	08005d33 	.word	0x08005d33
 8005c5c:	6833      	ldr	r3, [r6, #0]
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6032      	str	r2, [r6, #0]
 8005c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e09d      	b.n	8005dac <_printf_i+0x1e8>
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	1d19      	adds	r1, r3, #4
 8005c76:	6031      	str	r1, [r6, #0]
 8005c78:	0606      	lsls	r6, r0, #24
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0xbc>
 8005c7c:	681d      	ldr	r5, [r3, #0]
 8005c7e:	e003      	b.n	8005c88 <_printf_i+0xc4>
 8005c80:	0645      	lsls	r5, r0, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0xb8>
 8005c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	da03      	bge.n	8005c94 <_printf_i+0xd0>
 8005c8c:	232d      	movs	r3, #45	@ 0x2d
 8005c8e:	426d      	negs	r5, r5
 8005c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c94:	4859      	ldr	r0, [pc, #356]	@ (8005dfc <_printf_i+0x238>)
 8005c96:	230a      	movs	r3, #10
 8005c98:	e011      	b.n	8005cbe <_printf_i+0xfa>
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	6833      	ldr	r3, [r6, #0]
 8005c9e:	0608      	lsls	r0, r1, #24
 8005ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ca4:	d402      	bmi.n	8005cac <_printf_i+0xe8>
 8005ca6:	0649      	lsls	r1, r1, #25
 8005ca8:	bf48      	it	mi
 8005caa:	b2ad      	uxthmi	r5, r5
 8005cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cae:	4853      	ldr	r0, [pc, #332]	@ (8005dfc <_printf_i+0x238>)
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	bf14      	ite	ne
 8005cb4:	230a      	movne	r3, #10
 8005cb6:	2308      	moveq	r3, #8
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cbe:	6866      	ldr	r6, [r4, #4]
 8005cc0:	60a6      	str	r6, [r4, #8]
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	bfa2      	ittt	ge
 8005cc6:	6821      	ldrge	r1, [r4, #0]
 8005cc8:	f021 0104 	bicge.w	r1, r1, #4
 8005ccc:	6021      	strge	r1, [r4, #0]
 8005cce:	b90d      	cbnz	r5, 8005cd4 <_printf_i+0x110>
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	d04b      	beq.n	8005d6c <_printf_i+0x1a8>
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cda:	fb03 5711 	mls	r7, r3, r1, r5
 8005cde:	5dc7      	ldrb	r7, [r0, r7]
 8005ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ce4:	462f      	mov	r7, r5
 8005ce6:	42bb      	cmp	r3, r7
 8005ce8:	460d      	mov	r5, r1
 8005cea:	d9f4      	bls.n	8005cd6 <_printf_i+0x112>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d10b      	bne.n	8005d08 <_printf_i+0x144>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	07df      	lsls	r7, r3, #31
 8005cf4:	d508      	bpl.n	8005d08 <_printf_i+0x144>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	bfde      	ittt	le
 8005cfe:	2330      	movle	r3, #48	@ 0x30
 8005d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d08:	1b92      	subs	r2, r2, r6
 8005d0a:	6122      	str	r2, [r4, #16]
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	464b      	mov	r3, r9
 8005d12:	aa03      	add	r2, sp, #12
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f7ff fee6 	bl	8005ae8 <_printf_common>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d14a      	bne.n	8005db6 <_printf_i+0x1f2>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	b004      	add	sp, #16
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	4833      	ldr	r0, [pc, #204]	@ (8005e00 <_printf_i+0x23c>)
 8005d34:	2778      	movs	r7, #120	@ 0x78
 8005d36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6831      	ldr	r1, [r6, #0]
 8005d3e:	061f      	lsls	r7, r3, #24
 8005d40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d44:	d402      	bmi.n	8005d4c <_printf_i+0x188>
 8005d46:	065f      	lsls	r7, r3, #25
 8005d48:	bf48      	it	mi
 8005d4a:	b2ad      	uxthmi	r5, r5
 8005d4c:	6031      	str	r1, [r6, #0]
 8005d4e:	07d9      	lsls	r1, r3, #31
 8005d50:	bf44      	itt	mi
 8005d52:	f043 0320 	orrmi.w	r3, r3, #32
 8005d56:	6023      	strmi	r3, [r4, #0]
 8005d58:	b11d      	cbz	r5, 8005d62 <_printf_i+0x19e>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	e7ac      	b.n	8005cb8 <_printf_i+0xf4>
 8005d5e:	4827      	ldr	r0, [pc, #156]	@ (8005dfc <_printf_i+0x238>)
 8005d60:	e7e9      	b.n	8005d36 <_printf_i+0x172>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	f023 0320 	bic.w	r3, r3, #32
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	e7f6      	b.n	8005d5a <_printf_i+0x196>
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	e7bd      	b.n	8005cec <_printf_i+0x128>
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	6825      	ldr	r5, [r4, #0]
 8005d74:	6961      	ldr	r1, [r4, #20]
 8005d76:	1d18      	adds	r0, r3, #4
 8005d78:	6030      	str	r0, [r6, #0]
 8005d7a:	062e      	lsls	r6, r5, #24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0x1c0>
 8005d80:	6019      	str	r1, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <_printf_i+0x1c6>
 8005d84:	0668      	lsls	r0, r5, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0x1bc>
 8005d88:	8019      	strh	r1, [r3, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	4616      	mov	r6, r2
 8005d90:	e7bc      	b.n	8005d0c <_printf_i+0x148>
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	6032      	str	r2, [r6, #0]
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7fa fabe 	bl	8000320 <memchr>
 8005da4:	b108      	cbz	r0, 8005daa <_printf_i+0x1e6>
 8005da6:	1b80      	subs	r0, r0, r6
 8005da8:	6060      	str	r0, [r4, #4]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db4:	e7aa      	b.n	8005d0c <_printf_i+0x148>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	4632      	mov	r2, r6
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0ad      	beq.n	8005d20 <_printf_i+0x15c>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	079b      	lsls	r3, r3, #30
 8005dc8:	d413      	bmi.n	8005df2 <_printf_i+0x22e>
 8005dca:	68e0      	ldr	r0, [r4, #12]
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	4298      	cmp	r0, r3
 8005dd0:	bfb8      	it	lt
 8005dd2:	4618      	movlt	r0, r3
 8005dd4:	e7a6      	b.n	8005d24 <_printf_i+0x160>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4640      	mov	r0, r8
 8005dde:	47d0      	blx	sl
 8005de0:	3001      	adds	r0, #1
 8005de2:	d09d      	beq.n	8005d20 <_printf_i+0x15c>
 8005de4:	3501      	adds	r5, #1
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	9903      	ldr	r1, [sp, #12]
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dcf2      	bgt.n	8005dd6 <_printf_i+0x212>
 8005df0:	e7eb      	b.n	8005dca <_printf_i+0x206>
 8005df2:	2500      	movs	r5, #0
 8005df4:	f104 0619 	add.w	r6, r4, #25
 8005df8:	e7f5      	b.n	8005de6 <_printf_i+0x222>
 8005dfa:	bf00      	nop
 8005dfc:	08005f79 	.word	0x08005f79
 8005e00:	08005f8a 	.word	0x08005f8a

08005e04 <memmove>:
 8005e04:	4288      	cmp	r0, r1
 8005e06:	b510      	push	{r4, lr}
 8005e08:	eb01 0402 	add.w	r4, r1, r2
 8005e0c:	d902      	bls.n	8005e14 <memmove+0x10>
 8005e0e:	4284      	cmp	r4, r0
 8005e10:	4623      	mov	r3, r4
 8005e12:	d807      	bhi.n	8005e24 <memmove+0x20>
 8005e14:	1e43      	subs	r3, r0, #1
 8005e16:	42a1      	cmp	r1, r4
 8005e18:	d008      	beq.n	8005e2c <memmove+0x28>
 8005e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e22:	e7f8      	b.n	8005e16 <memmove+0x12>
 8005e24:	4402      	add	r2, r0
 8005e26:	4601      	mov	r1, r0
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	d100      	bne.n	8005e2e <memmove+0x2a>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e36:	e7f7      	b.n	8005e28 <memmove+0x24>

08005e38 <_sbrk_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d06      	ldr	r5, [pc, #24]	@ (8005e54 <_sbrk_r+0x1c>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fa fef8 	bl	8000c38 <_sbrk>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_sbrk_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_sbrk_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	2400031c 	.word	0x2400031c

08005e58 <memcpy>:
 8005e58:	440a      	add	r2, r1
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e60:	d100      	bne.n	8005e64 <memcpy+0xc>
 8005e62:	4770      	bx	lr
 8005e64:	b510      	push	{r4, lr}
 8005e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e6e:	4291      	cmp	r1, r2
 8005e70:	d1f9      	bne.n	8005e66 <memcpy+0xe>
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <_realloc_r>:
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e78:	4680      	mov	r8, r0
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	b921      	cbnz	r1, 8005e8a <_realloc_r+0x16>
 8005e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e84:	4611      	mov	r1, r2
 8005e86:	f7ff bc4b 	b.w	8005720 <_malloc_r>
 8005e8a:	b92a      	cbnz	r2, 8005e98 <_realloc_r+0x24>
 8005e8c:	f7ff fbdc 	bl	8005648 <_free_r>
 8005e90:	2400      	movs	r4, #0
 8005e92:	4620      	mov	r0, r4
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e98:	f000 f81a 	bl	8005ed0 <_malloc_usable_size_r>
 8005e9c:	4285      	cmp	r5, r0
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	d802      	bhi.n	8005ea8 <_realloc_r+0x34>
 8005ea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ea6:	d8f4      	bhi.n	8005e92 <_realloc_r+0x1e>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7ff fc38 	bl	8005720 <_malloc_r>
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d0ec      	beq.n	8005e90 <_realloc_r+0x1c>
 8005eb6:	42b5      	cmp	r5, r6
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4621      	mov	r1, r4
 8005ebc:	bf28      	it	cs
 8005ebe:	4632      	movcs	r2, r6
 8005ec0:	f7ff ffca 	bl	8005e58 <memcpy>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	f7ff fbbe 	bl	8005648 <_free_r>
 8005ecc:	463c      	mov	r4, r7
 8005ece:	e7e0      	b.n	8005e92 <_realloc_r+0x1e>

08005ed0 <_malloc_usable_size_r>:
 8005ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed4:	1f18      	subs	r0, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bfbc      	itt	lt
 8005eda:	580b      	ldrlt	r3, [r1, r0]
 8005edc:	18c0      	addlt	r0, r0, r3
 8005ede:	4770      	bx	lr

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
